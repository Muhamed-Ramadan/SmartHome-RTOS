
SmartHome_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  000029c6  00002a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000087a  0080020c  0080020c  00002b66  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000520  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e4d  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bc4  00000000  00000000  00009f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000327d  00000000  00000000  0000bb61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dfc  00000000  00000000  0000ede0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001895  00000000  00000000  0000fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f7e  00000000  00000000  00011471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  000163ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c6       	rjmp	.+3344   	; 0xd42 <__vector_12>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ec       	ldi	r30, 0xC6	; 198
      a0:	f9 e2       	ldi	r31, 0x29	; 41
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 38       	cpi	r26, 0x86	; 134
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
//RTOS Services


int main(void)
{
	Project_Init();
      ca:	0e 94 af 10 	call	0x215e	; 0x215e <Project_Init>
      ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x4>

000000d0 <DHT_start>:
#include <util/delay.h>


void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
      d0:	61 e0       	ldi	r22, 0x01	; 1
      d2:	82 e1       	ldi	r24, 0x12	; 18
      d4:	e3 d2       	rcall	.+1478   	; 0x69c <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	82 e1       	ldi	r24, 0x12	; 18
      da:	53 d2       	rcall	.+1190   	; 0x582 <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      dc:	8f e3       	ldi	r24, 0x3F	; 63
      de:	9c e9       	ldi	r25, 0x9C	; 156
      e0:	01 97       	sbiw	r24, 0x01	; 1
      e2:	f1 f7       	brne	.-4      	; 0xe0 <DHT_start+0x10>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <DHT_start+0x16>
      e6:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	82 e1       	ldi	r24, 0x12	; 18
      ec:	4a c2       	rjmp	.+1172   	; 0x582 <writePin>
      ee:	08 95       	ret

000000f0 <DHT_read>:
}

u8 DHT_read(void)
{
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	d8 e0       	ldi	r29, 0x08	; 8
	u8 bitLogic=0 ,i=0;
      f6:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
	{
		while (readPin(DHT_PIN)==0);
      f8:	82 e1       	ldi	r24, 0x12	; 18
      fa:	5d d3       	rcall	.+1722   	; 0x7b6 <readPin>
      fc:	88 23       	and	r24, r24
      fe:	e1 f3       	breq	.-8      	; 0xf8 <DHT_read+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	80 e5       	ldi	r24, 0x50	; 80
     102:	8a 95       	dec	r24
     104:	f1 f7       	brne	.-4      	; 0x102 <DHT_read+0x12>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     106:	82 e1       	ldi	r24, 0x12	; 18
     108:	56 d3       	rcall	.+1708   	; 0x7b6 <readPin>
     10a:	81 11       	cpse	r24, r1
     10c:	02 c0       	rjmp	.+4      	; 0x112 <DHT_read+0x22>
		{
			bitLogic=bitLogic<<1;
     10e:	cc 0f       	add	r28, r28
     110:	02 c0       	rjmp	.+4      	; 0x116 <DHT_read+0x26>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     112:	cc 0f       	add	r28, r28
		}
		
		while(readPin(DHT_PIN));
     114:	c1 60       	ori	r28, 0x01	; 1
     116:	82 e1       	ldi	r24, 0x12	; 18
     118:	4e d3       	rcall	.+1692   	; 0x7b6 <readPin>
     11a:	81 11       	cpse	r24, r1
     11c:	fc cf       	rjmp	.-8      	; 0x116 <DHT_read+0x26>
     11e:	d1 50       	subi	r29, 0x01	; 1
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     120:	59 f7       	brne	.-42     	; 0xf8 <DHT_read+0x8>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     122:	8c 2f       	mov	r24, r28
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	82 e1       	ldi	r24, 0x12	; 18
     12e:	b6 d2       	rcall	.+1388   	; 0x69c <pinDirection>
	while(readPin(DHT_PIN));
     130:	82 e1       	ldi	r24, 0x12	; 18
     132:	41 d3       	rcall	.+1666   	; 0x7b6 <readPin>
     134:	81 11       	cpse	r24, r1
     136:	fc cf       	rjmp	.-8      	; 0x130 <DHT_Response+0x6>
	while(!readPin(DHT_PIN));
     138:	82 e1       	ldi	r24, 0x12	; 18
     13a:	3d d3       	rcall	.+1658   	; 0x7b6 <readPin>
     13c:	88 23       	and	r24, r24
     13e:	e1 f3       	breq	.-8      	; 0x138 <DHT_Response+0xe>
	while(readPin(DHT_PIN));
     140:	82 e1       	ldi	r24, 0x12	; 18
     142:	39 d3       	rcall	.+1650   	; 0x7b6 <readPin>
     144:	81 11       	cpse	r24, r1
     146:	fc cf       	rjmp	.-8      	; 0x140 <DHT_Response+0x16>
     148:	08 95       	ret

0000014a <intTostring>:
}
     14a:	4f 92       	push	r4
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	66 97       	sbiw	r28, 0x16	; 22
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	3c 01       	movw	r6, r24
     17c:	5b 01       	movw	r10, r22
     17e:	4a 01       	movw	r8, r20
     180:	42 2e       	mov	r4, r18
     182:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     184:	8e e2       	ldi	r24, 0x2E	; 46
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     18c:	8a e0       	ldi	r24, 0x0A	; 10
     18e:	fe 01       	movw	r30, r28
     190:	33 96       	adiw	r30, 0x03	; 3
     192:	df 01       	movw	r26, r30
     194:	98 2f       	mov	r25, r24
     196:	1d 92       	st	X+, r1
     198:	9a 95       	dec	r25
     19a:	e9 f7       	brne	.-6      	; 0x196 <intTostring+0x4c>
     19c:	3a 96       	adiw	r30, 0x0a	; 10
     19e:	df 01       	movw	r26, r30
     1a0:	1d 92       	st	X+, r1
     1a2:	8a 95       	dec	r24
     1a4:	e9 f7       	brne	.-6      	; 0x1a0 <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     1a6:	77 23       	and	r23, r23
     1a8:	34 f4       	brge	.+12     	; 0x1b6 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     1aa:	e8 94       	clt
     1ac:	b7 f8       	bld	r11, 7
				temp[0]='-';
     1ae:	8d e2       	ldi	r24, 0x2D	; 45
     1b0:	fa 01       	movw	r30, r20
     1b2:	81 93       	st	Z+, r24
     1b4:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     1b6:	95 01       	movw	r18, r10
     1b8:	ad ec       	ldi	r26, 0xCD	; 205
     1ba:	bc ec       	ldi	r27, 0xCC	; 204
     1bc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__umulhisi3>
     1c0:	6c 01       	movw	r12, r24
     1c2:	d6 94       	lsr	r13
     1c4:	c7 94       	ror	r12
     1c6:	d6 94       	lsr	r13
     1c8:	c7 94       	ror	r12
     1ca:	d6 94       	lsr	r13
     1cc:	c7 94       	ror	r12
     1ce:	df 92       	push	r13
     1d0:	cf 92       	push	r12
     1d2:	08 e1       	ldi	r16, 0x18	; 24
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	1f 93       	push	r17
     1d8:	0f 93       	push	r16
     1da:	9f 92       	push	r9
     1dc:	8f 92       	push	r8
     1de:	0e 94 06 12 	call	0x240c	; 0x240c <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     1e2:	93 01       	movw	r18, r6
     1e4:	ad ec       	ldi	r26, 0xCD	; 205
     1e6:	bc ec       	ldi	r27, 0xCC	; 204
     1e8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__umulhisi3>
     1ec:	7c 01       	movw	r14, r24
     1ee:	f6 94       	lsr	r15
     1f0:	e7 94       	ror	r14
     1f2:	f6 94       	lsr	r15
     1f4:	e7 94       	ror	r14
     1f6:	f6 94       	lsr	r15
     1f8:	e7 94       	ror	r14
     1fa:	ff 92       	push	r15
     1fc:	ef 92       	push	r14
     1fe:	1f 93       	push	r17
     200:	0f 93       	push	r16
     202:	5f 92       	push	r5
     204:	4f 92       	push	r4
     206:	0e 94 06 12 	call	0x240c	; 0x240c <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     20a:	c6 01       	movw	r24, r12
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	cc 0c       	add	r12, r12
     212:	dd 1c       	adc	r13, r13
     214:	cc 0c       	add	r12, r12
     216:	dd 1c       	adc	r13, r13
     218:	cc 0c       	add	r12, r12
     21a:	dd 1c       	adc	r13, r13
     21c:	c8 0e       	add	r12, r24
     21e:	d9 1e       	adc	r13, r25
     220:	ac 18       	sub	r10, r12
     222:	bd 08       	sbc	r11, r13
     224:	bf 92       	push	r11
     226:	af 92       	push	r10
     228:	1f 93       	push	r17
     22a:	0f 93       	push	r16
     22c:	6e 01       	movw	r12, r28
     22e:	f3 e0       	ldi	r31, 0x03	; 3
     230:	cf 0e       	add	r12, r31
     232:	d1 1c       	adc	r13, r1
     234:	df 92       	push	r13
     236:	cf 92       	push	r12
     238:	0e 94 06 12 	call	0x240c	; 0x240c <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     23c:	c7 01       	movw	r24, r14
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	ee 0c       	add	r14, r14
     244:	ff 1c       	adc	r15, r15
     246:	ee 0c       	add	r14, r14
     248:	ff 1c       	adc	r15, r15
     24a:	ee 0c       	add	r14, r14
     24c:	ff 1c       	adc	r15, r15
     24e:	e8 0e       	add	r14, r24
     250:	f9 1e       	adc	r15, r25
     252:	6e 18       	sub	r6, r14
     254:	7f 08       	sbc	r7, r15
     256:	7f 92       	push	r7
     258:	6f 92       	push	r6
     25a:	1f 93       	push	r17
     25c:	0f 93       	push	r16
     25e:	8e 01       	movw	r16, r28
     260:	03 5f       	subi	r16, 0xF3	; 243
     262:	1f 4f       	sbci	r17, 0xFF	; 255
     264:	1f 93       	push	r17
     266:	0f 93       	push	r16
     268:	0e 94 06 12 	call	0x240c	; 0x240c <sprintf>
			
			strcat(hum,dot);
     26c:	be 01       	movw	r22, r28
     26e:	6f 5f       	subi	r22, 0xFF	; 255
     270:	7f 4f       	sbci	r23, 0xFF	; 255
     272:	84 2d       	mov	r24, r4
     274:	95 2d       	mov	r25, r5
     276:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <strcat>
			strcat(temp,dot);
     27a:	be 01       	movw	r22, r28
     27c:	6f 5f       	subi	r22, 0xFF	; 255
     27e:	7f 4f       	sbci	r23, 0xFF	; 255
     280:	c4 01       	movw	r24, r8
     282:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <strcat>
			strcat(hum,hum_2);
     286:	b8 01       	movw	r22, r16
     288:	84 2d       	mov	r24, r4
     28a:	95 2d       	mov	r25, r5
     28c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <strcat>
			strcat(temp,temp_2);
     290:	b6 01       	movw	r22, r12
     292:	c4 01       	movw	r24, r8
     294:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <strcat>
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	66 96       	adiw	r28, 0x16	; 22
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	bf 90       	pop	r11
     2c0:	af 90       	pop	r10
     2c2:	9f 90       	pop	r9
     2c4:	8f 90       	pop	r8
     2c6:	7f 90       	pop	r7
     2c8:	6f 90       	pop	r6
     2ca:	5f 90       	pop	r5
     2cc:	4f 90       	pop	r4
     2ce:	08 95       	ret

000002d0 <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	7c 01       	movw	r14, r24
     2e0:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     2e2:	f6 de       	rcall	.-532    	; 0xd0 <DHT_start>
	DHT_Response();
     2e4:	22 df       	rcall	.-444    	; 0x12a <DHT_Response>
	humidity_I=DHT_read();
     2e6:	04 df       	rcall	.-504    	; 0xf0 <DHT_read>
     2e8:	d8 2e       	mov	r13, r24
	humidity_D=DHT_read();
     2ea:	02 df       	rcall	.-508    	; 0xf0 <DHT_read>
     2ec:	d8 2f       	mov	r29, r24
	temp_I=DHT_read();
     2ee:	00 df       	rcall	.-512    	; 0xf0 <DHT_read>
     2f0:	c8 2f       	mov	r28, r24
     2f2:	fe de       	rcall	.-516    	; 0xf0 <DHT_read>
	temp_D=DHT_read();
     2f4:	6c 2f       	mov	r22, r28
     2f6:	70 e0       	ldi	r23, 0x00	; 0
	
		hum_1=((humidity_I<<8)|humidity_D);
		temp_1=((temp_I<<8)|temp_D);
		
		intTostring(hum_1,temp_1,temp,hum);
     2f8:	76 2f       	mov	r23, r22
     2fa:	66 27       	eor	r22, r22
     2fc:	68 2b       	or	r22, r24
     2fe:	8d 2f       	mov	r24, r29
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	97 01       	movw	r18, r14
     304:	a8 01       	movw	r20, r16
     306:	9d 29       	or	r25, r13
     308:	20 df       	rcall	.-448    	; 0x14a <intTostring>
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	df 91       	pop	r29
		return TRUE;
	
}
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	08 95       	ret

0000031c <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	6f e0       	ldi	r22, 0x0F	; 15
     320:	87 e3       	ldi	r24, 0x37	; 55
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	93 d2       	rcall	.+1318   	; 0x84c <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	6f e0       	ldi	r22, 0x0F	; 15
     32a:	88 e3       	ldi	r24, 0x38	; 56
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	7f d2       	rcall	.+1278   	; 0x82e <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	60 e7       	ldi	r22, 0x70	; 112
     334:	87 e3       	ldi	r24, 0x37	; 55
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	89 d2       	rcall	.+1298   	; 0x84c <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	60 e7       	ldi	r22, 0x70	; 112
     33e:	88 e3       	ldi	r24, 0x38	; 56
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	75 c2       	rjmp	.+1258   	; 0x82e <writePins>
     344:	08 95       	ret

00000346 <GetKey>:
}



u8 GetKey(void)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
     34a:	d8 e0       	ldi	r29, 0x08	; 8
	{
		writePin(row,LOW);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	8d 2f       	mov	r24, r29
     350:	18 d1       	rcall	.+560    	; 0x582 <writePin>
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
     352:	cc e0       	ldi	r28, 0x0C	; 12
		{
			if (!readPin(col))
     354:	8c 2f       	mov	r24, r28
     356:	2f d2       	rcall	.+1118   	; 0x7b6 <readPin>
     358:	81 11       	cpse	r24, r1
     35a:	13 c0       	rjmp	.+38     	; 0x382 <GetKey+0x3c>
			{
				while(!readPin(col));
     35c:	8c 2f       	mov	r24, r28
     35e:	2b d2       	rcall	.+1110   	; 0x7b6 <readPin>
     360:	88 23       	and	r24, r24
     362:	e1 f3       	breq	.-8      	; 0x35c <GetKey+0x16>
     364:	8d 2f       	mov	r24, r29
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	08 97       	sbiw	r24, 0x08	; 8
     36a:	fc 01       	movw	r30, r24
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	e8 0f       	add	r30, r24
     372:	f9 1f       	adc	r31, r25
     374:	e0 50       	subi	r30, 0x00	; 0
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	ec 0f       	add	r30, r28
     37a:	f1 1d       	adc	r31, r1
     37c:	3c 97       	sbiw	r30, 0x0c	; 12
     37e:	80 81       	ld	r24, Z
     380:	0a c0       	rjmp	.+20     	; 0x396 <GetKey+0x50>
				return key;
     382:	cf 5f       	subi	r28, 0xFF	; 255
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
	{
		writePin(row,LOW);
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
     384:	cf 30       	cpi	r28, 0x0F	; 15
     386:	31 f7       	brne	.-52     	; 0x354 <GetKey+0xe>
				while(!readPin(col));
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
				return key;
			}	
		}
		writePin(row,HIGH);
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	8d 2f       	mov	r24, r29
     38c:	fa d0       	rcall	.+500    	; 0x582 <writePin>
     38e:	df 5f       	subi	r29, 0xFF	; 255
u8 GetKey(void)
{
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
     390:	dc 30       	cpi	r29, 0x0C	; 12
     392:	e1 f6       	brne	.-72     	; 0x34c <GetKey+0x6>
     394:	80 e0       	ldi	r24, 0x00	; 0
				return key;
			}	
		}
		writePin(row,HIGH);
	}	
	return key;
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <LCD_latch>:
     39c:	61 e0       	ldi	r22, 0x01	; 1
	writePin(LCD_E,LOW);
	_delay_us(50);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	f0 d0       	rcall	.+480    	; 0x582 <writePin>
     3a2:	85 e8       	ldi	r24, 0x85	; 133
     3a4:	8a 95       	dec	r24
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_latch+0x8>
     3a8:	00 00       	nop
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	e9 d0       	rcall	.+466    	; 0x582 <writePin>
     3b0:	85 e8       	ldi	r24, 0x85	; 133
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_latch+0x16>
     3b6:	00 00       	nop
     3b8:	08 95       	ret

000003ba <SendToLCD>:
     3ba:	cf 93       	push	r28
     3bc:	c8 2f       	mov	r28, r24
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ef       	ldi	r22, 0xF0	; 240
     3c2:	8b e3       	ldi	r24, 0x3B	; 59
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	33 d2       	rcall	.+1126   	; 0x82e <writePins>
     3c8:	6c 2f       	mov	r22, r28
     3ca:	60 7f       	andi	r22, 0xF0	; 240
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	8b e3       	ldi	r24, 0x3B	; 59
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	2d d2       	rcall	.+1114   	; 0x82e <writePins>
     3d4:	e3 df       	rcall	.-58     	; 0x39c <LCD_latch>
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	60 ef       	ldi	r22, 0xF0	; 240
     3da:	8b e3       	ldi	r24, 0x3B	; 59
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	27 d2       	rcall	.+1102   	; 0x82e <writePins>
     3e0:	80 e1       	ldi	r24, 0x10	; 16
     3e2:	c8 9f       	mul	r28, r24
     3e4:	b0 01       	movw	r22, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	8b e3       	ldi	r24, 0x3B	; 59
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	1f d2       	rcall	.+1086   	; 0x82e <writePins>
     3f0:	d5 df       	rcall	.-86     	; 0x39c <LCD_latch>
     3f2:	85 e8       	ldi	r24, 0x85	; 133
     3f4:	8a 95       	dec	r24
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <SendToLCD+0x3a>
     3f8:	00 00       	nop
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <LCD_send_cmd>:
     3fe:	cf 93       	push	r28
     400:	c8 2f       	mov	r28, r24
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	bd d0       	rcall	.+378    	; 0x582 <writePin>
     408:	8c 2f       	mov	r24, r28
     40a:	d7 df       	rcall	.-82     	; 0x3ba <SendToLCD>
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <LCD_CLEAR>:
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	f5 df       	rcall	.-22     	; 0x3fe <LCD_send_cmd>
     414:	8f e9       	ldi	r24, 0x9F	; 159
     416:	9f e0       	ldi	r25, 0x0F	; 15
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <LCD_CLEAR+0x8>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <LCD_CLEAR+0xe>
     41e:	00 00       	nop
     420:	08 95       	ret

00000422 <LCD_ret_Home>:
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	ec df       	rcall	.-40     	; 0x3fe <LCD_send_cmd>
     426:	8f e9       	ldi	r24, 0x9F	; 159
     428:	9f e0       	ldi	r25, 0x0F	; 15
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <LCD_ret_Home+0x8>
     42e:	00 c0       	rjmp	.+0      	; 0x430 <LCD_ret_Home+0xe>
     430:	00 00       	nop
     432:	08 95       	ret

00000434 <LCD_init>:
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	60 ef       	ldi	r22, 0xF0	; 240
     438:	8a e3       	ldi	r24, 0x3A	; 58
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	07 d2       	rcall	.+1038   	; 0x84c <pinsDirection>
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	6c e0       	ldi	r22, 0x0C	; 12
     442:	8a e3       	ldi	r24, 0x3A	; 58
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 d2       	rcall	.+1028   	; 0x84c <pinsDirection>
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	89 ef       	ldi	r24, 0xF9	; 249
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	80 40       	sbci	r24, 0x00	; 0
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <LCD_init+0x1a>
     456:	00 c0       	rjmp	.+0      	; 0x458 <LCD_init+0x24>
     458:	00 00       	nop
     45a:	e3 df       	rcall	.-58     	; 0x422 <LCD_ret_Home>
     45c:	86 e0       	ldi	r24, 0x06	; 6
     45e:	cf df       	rcall	.-98     	; 0x3fe <LCD_send_cmd>
     460:	8c e0       	ldi	r24, 0x0C	; 12
     462:	cd df       	rcall	.-102    	; 0x3fe <LCD_send_cmd>
     464:	80 e1       	ldi	r24, 0x10	; 16
     466:	cb df       	rcall	.-106    	; 0x3fe <LCD_send_cmd>
     468:	88 e2       	ldi	r24, 0x28	; 40
     46a:	c9 df       	rcall	.-110    	; 0x3fe <LCD_send_cmd>
     46c:	d1 cf       	rjmp	.-94     	; 0x410 <LCD_CLEAR>
     46e:	08 95       	ret

00000470 <LCD_send_data>:
     470:	cf 93       	push	r28
     472:	c8 2f       	mov	r28, r24
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	84 d0       	rcall	.+264    	; 0x582 <writePin>
     47a:	8c 2f       	mov	r24, r28
     47c:	9e df       	rcall	.-196    	; 0x3ba <SendToLCD>
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <disp_str>:
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
void disp_str(u8* str)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	fc 01       	movw	r30, r24
	u8 indx=0;
	while(str[indx]!='\0')
     48a:	80 81       	ld	r24, Z
     48c:	88 23       	and	r24, r24
     48e:	51 f0       	breq	.+20     	; 0x4a4 <disp_str+0x22>
     490:	8f 01       	movw	r16, r30
     492:	c0 e0       	ldi	r28, 0x00	; 0
	writePin(LCD_E,LOW);
	_delay_us(50);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
     494:	ed df       	rcall	.-38     	; 0x470 <LCD_send_data>
{
	u8 indx=0;
	while(str[indx]!='\0')
	{
		disp_char(indx[str]);
		indx++;
     496:	cf 5f       	subi	r28, 0xFF	; 255
	disp_char(letter);	
}
void disp_str(u8* str)
{
	u8 indx=0;
	while(str[indx]!='\0')
     498:	f8 01       	movw	r30, r16
     49a:	ec 0f       	add	r30, r28
     49c:	f1 1d       	adc	r31, r1
     49e:	80 81       	ld	r24, Z
     4a0:	81 11       	cpse	r24, r1
     4a2:	f8 cf       	rjmp	.-16     	; 0x494 <disp_str+0x12>
	{
		disp_char(indx[str]);
		indx++;
	}
}
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <LCD_GOTXY+0xc>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
     4b0:	8f e7       	ldi	r24, 0x7F	; 127
     4b2:	86 0f       	add	r24, r22
     4b4:	a4 cf       	rjmp	.-184    	; 0x3fe <LCD_send_cmd>
     4b6:	08 95       	ret
	}
	else if(row==2)
     4b8:	82 30       	cpi	r24, 0x02	; 2
     4ba:	21 f4       	brne	.+8      	; 0x4c4 <LCD_GOTXY+0x18>
	{
		LCD_send_cmd(0xC0+col-1);	
     4bc:	8f eb       	ldi	r24, 0xBF	; 191
     4be:	86 0f       	add	r24, r22
     4c0:	9e cf       	rjmp	.-196    	; 0x3fe <LCD_send_cmd>
     4c2:	08 95       	ret
	}
	else if(row==3)
     4c4:	83 30       	cpi	r24, 0x03	; 3
     4c6:	21 f4       	brne	.+8      	; 0x4d0 <LCD_GOTXY+0x24>
	{
		LCD_send_cmd(0x90+col-1);
     4c8:	8f e8       	ldi	r24, 0x8F	; 143
     4ca:	86 0f       	add	r24, r22
     4cc:	98 cf       	rjmp	.-208    	; 0x3fe <LCD_send_cmd>
     4ce:	08 95       	ret
	}
	else if(row==4)
     4d0:	84 30       	cpi	r24, 0x04	; 4
	{
		LCD_send_cmd(0xD0+col-1);
     4d2:	19 f4       	brne	.+6      	; 0x4da <LCD_GOTXY+0x2e>
     4d4:	8f ec       	ldi	r24, 0xCF	; 207
     4d6:	86 0f       	add	r24, r22
     4d8:	92 cf       	rjmp	.-220    	; 0x3fe <LCD_send_cmd>
     4da:	08 95       	ret

000004dc <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
     4dc:	cf 93       	push	r28
     4de:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
     4e0:	e5 df       	rcall	.-54     	; 0x4ac <LCD_GOTXY>
	writePin(LCD_E,LOW);
	_delay_us(50);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
     4e2:	8c 2f       	mov	r24, r28
     4e4:	c5 df       	rcall	.-118    	; 0x470 <LCD_send_data>

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     4f0:	dd df       	rcall	.-70     	; 0x4ac <LCD_GOTXY>
	disp_str(str);
     4f2:	ce 01       	movw	r24, r28
     4f4:	c6 df       	rcall	.-116    	; 0x482 <disp_str>
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <disp_int>:


void disp_int(u32 intvalue)
{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2b 97       	sbiw	r28, 0x0b	; 11
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     514:	8e 01       	movw	r16, r28
     516:	0f 5f       	subi	r16, 0xFF	; 255
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	2b e0       	ldi	r18, 0x0B	; 11
     51c:	f8 01       	movw	r30, r16
     51e:	11 92       	st	Z+, r1
     520:	2a 95       	dec	r18
     522:	e9 f7       	brne	.-6      	; 0x51e <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	7f 93       	push	r23
     52a:	6f 93       	push	r22
     52c:	88 e1       	ldi	r24, 0x18	; 24
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	1f 93       	push	r17
     536:	0f 93       	push	r16
     538:	0e 94 06 12 	call	0x240c	; 0x240c <sprintf>
		disp_str(string);
     53c:	c8 01       	movw	r24, r16
     53e:	a1 df       	rcall	.-190    	; 0x482 <disp_str>
}
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	2b 96       	adiw	r28, 0x0b	; 11
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <ADC_init>:
     560:	3e 9a       	sbi	0x07, 6	; 7
     562:	86 b1       	in	r24, 0x06	; 6
     564:	87 68       	ori	r24, 0x87	; 135
     566:	86 b9       	out	0x06, r24	; 6
     568:	08 95       	ret

0000056a <read_analog>:
     56a:	97 b1       	in	r25, 0x07	; 7
     56c:	90 7e       	andi	r25, 0xE0	; 224
     56e:	97 b9       	out	0x07, r25	; 7
     570:	97 b1       	in	r25, 0x07	; 7
     572:	89 2b       	or	r24, r25
     574:	87 b9       	out	0x07, r24	; 7
     576:	36 9a       	sbi	0x06, 6	; 6
     578:	36 99       	sbic	0x06, 6	; 6
     57a:	fe cf       	rjmp	.-4      	; 0x578 <read_analog+0xe>
     57c:	84 b1       	in	r24, 0x04	; 4
     57e:	95 b1       	in	r25, 0x05	; 5
     580:	08 95       	ret

00000582 <writePin>:
#include "registers.h"
#include "DIO.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PAU0)&&(pinNo<=PAU7)){
     582:	88 30       	cpi	r24, 0x08	; 8
     584:	f8 f4       	brcc	.+62     	; 0x5c4 <writePin+0x42>
		if(logic==HIGH)
     586:	61 30       	cpi	r22, 0x01	; 1
     588:	69 f4       	brne	.+26     	; 0x5a4 <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     58a:	4b b3       	in	r20, 0x1b	; 27
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	b9 01       	movw	r22, r18
     592:	02 c0       	rjmp	.+4      	; 0x598 <writePin+0x16>
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	8a 95       	dec	r24
     59a:	e2 f7       	brpl	.-8      	; 0x594 <writePin+0x12>
     59c:	cb 01       	movw	r24, r22
     59e:	84 2b       	or	r24, r20
     5a0:	8b bb       	out	0x1b, r24	; 27
     5a2:	08 95       	ret
		else if(logic==LOW)
     5a4:	61 11       	cpse	r22, r1
     5a6:	79 c0       	rjmp	.+242    	; 0x69a <writePin+0x118>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     5a8:	4b b3       	in	r20, 0x1b	; 27
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	b9 01       	movw	r22, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <writePin+0x34>
     5b2:	66 0f       	add	r22, r22
     5b4:	77 1f       	adc	r23, r23
     5b6:	8a 95       	dec	r24
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <writePin+0x30>
     5ba:	cb 01       	movw	r24, r22
     5bc:	80 95       	com	r24
     5be:	84 23       	and	r24, r20
     5c0:	8b bb       	out	0x1b, r24	; 27
     5c2:	08 95       	ret
		else{}
}

	else if((pinNo>=PBU0)&&(pinNo<=PBU7)){
     5c4:	98 ef       	ldi	r25, 0xF8	; 248
     5c6:	98 0f       	add	r25, r24
     5c8:	98 30       	cpi	r25, 0x08	; 8
     5ca:	00 f5       	brcc	.+64     	; 0x60c <writePin+0x8a>
		if(logic==HIGH)
     5cc:	61 30       	cpi	r22, 0x01	; 1
     5ce:	69 f4       	brne	.+26     	; 0x5ea <writePin+0x68>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     5d0:	48 b3       	in	r20, 0x18	; 24
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	b9 01       	movw	r22, r18
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <writePin+0x5c>
     5da:	66 0f       	add	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	9a 95       	dec	r25
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <writePin+0x58>
     5e2:	cb 01       	movw	r24, r22
     5e4:	84 2b       	or	r24, r20
     5e6:	88 bb       	out	0x18, r24	; 24
     5e8:	08 95       	ret
		else if(logic==LOW)
     5ea:	61 11       	cpse	r22, r1
     5ec:	56 c0       	rjmp	.+172    	; 0x69a <writePin+0x118>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     5ee:	48 b3       	in	r20, 0x18	; 24
     5f0:	88 50       	subi	r24, 0x08	; 8
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	b9 01       	movw	r22, r18
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <writePin+0x7c>
     5fa:	66 0f       	add	r22, r22
     5fc:	77 1f       	adc	r23, r23
     5fe:	8a 95       	dec	r24
     600:	e2 f7       	brpl	.-8      	; 0x5fa <writePin+0x78>
     602:	cb 01       	movw	r24, r22
     604:	80 95       	com	r24
     606:	84 23       	and	r24, r20
     608:	88 bb       	out	0x18, r24	; 24
     60a:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PCU0)&&(pinNo<=PCU7)){
     60c:	90 ef       	ldi	r25, 0xF0	; 240
     60e:	98 0f       	add	r25, r24
     610:	98 30       	cpi	r25, 0x08	; 8
     612:	00 f5       	brcc	.+64     	; 0x654 <writePin+0xd2>
		if(logic==HIGH)
     614:	61 30       	cpi	r22, 0x01	; 1
     616:	69 f4       	brne	.+26     	; 0x632 <writePin+0xb0>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     618:	45 b3       	in	r20, 0x15	; 21
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	b9 01       	movw	r22, r18
     620:	02 c0       	rjmp	.+4      	; 0x626 <writePin+0xa4>
     622:	66 0f       	add	r22, r22
     624:	77 1f       	adc	r23, r23
     626:	9a 95       	dec	r25
     628:	e2 f7       	brpl	.-8      	; 0x622 <writePin+0xa0>
     62a:	cb 01       	movw	r24, r22
     62c:	84 2b       	or	r24, r20
     62e:	85 bb       	out	0x15, r24	; 21
     630:	08 95       	ret
		else if(logic==LOW)
     632:	61 11       	cpse	r22, r1
     634:	32 c0       	rjmp	.+100    	; 0x69a <writePin+0x118>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     636:	45 b3       	in	r20, 0x15	; 21
     638:	80 51       	subi	r24, 0x10	; 16
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	b9 01       	movw	r22, r18
     640:	02 c0       	rjmp	.+4      	; 0x646 <writePin+0xc4>
     642:	66 0f       	add	r22, r22
     644:	77 1f       	adc	r23, r23
     646:	8a 95       	dec	r24
     648:	e2 f7       	brpl	.-8      	; 0x642 <writePin+0xc0>
     64a:	cb 01       	movw	r24, r22
     64c:	80 95       	com	r24
     64e:	84 23       	and	r24, r20
     650:	85 bb       	out	0x15, r24	; 21
     652:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PDU0)&&(pinNo<=PDU7)){
     654:	98 ee       	ldi	r25, 0xE8	; 232
     656:	98 0f       	add	r25, r24
     658:	98 30       	cpi	r25, 0x08	; 8
     65a:	f8 f4       	brcc	.+62     	; 0x69a <writePin+0x118>
		if(logic==HIGH)
     65c:	61 30       	cpi	r22, 0x01	; 1
     65e:	69 f4       	brne	.+26     	; 0x67a <writePin+0xf8>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     660:	42 b3       	in	r20, 0x12	; 18
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	02 c0       	rjmp	.+4      	; 0x66e <writePin+0xec>
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	9a 95       	dec	r25
     670:	e2 f7       	brpl	.-8      	; 0x66a <writePin+0xe8>
     672:	cb 01       	movw	r24, r22
     674:	84 2b       	or	r24, r20
     676:	82 bb       	out	0x12, r24	; 18
     678:	08 95       	ret
		else if(logic==LOW)
     67a:	61 11       	cpse	r22, r1
     67c:	0e c0       	rjmp	.+28     	; 0x69a <writePin+0x118>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     67e:	42 b3       	in	r20, 0x12	; 18
     680:	88 51       	subi	r24, 0x18	; 24
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	b9 01       	movw	r22, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <writePin+0x10c>
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	8a 95       	dec	r24
     690:	e2 f7       	brpl	.-8      	; 0x68a <writePin+0x108>
     692:	cb 01       	movw	r24, r22
     694:	80 95       	com	r24
     696:	84 23       	and	r24, r20
     698:	82 bb       	out	0x12, r24	; 18
     69a:	08 95       	ret

0000069c <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PAU0) && (pinNo <= PAU7)){
     69c:	88 30       	cpi	r24, 0x08	; 8
     69e:	f8 f4       	brcc	.+62     	; 0x6de <pinDirection+0x42>
		if(direction == OUTPUT)
     6a0:	61 30       	cpi	r22, 0x01	; 1
     6a2:	69 f4       	brne	.+26     	; 0x6be <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     6a4:	4a b3       	in	r20, 0x1a	; 26
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	b9 01       	movw	r22, r18
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <pinDirection+0x16>
     6ae:	66 0f       	add	r22, r22
     6b0:	77 1f       	adc	r23, r23
     6b2:	8a 95       	dec	r24
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <pinDirection+0x12>
     6b6:	cb 01       	movw	r24, r22
     6b8:	84 2b       	or	r24, r20
     6ba:	8a bb       	out	0x1a, r24	; 26
     6bc:	08 95       	ret
		else if(direction == INPUT)
     6be:	61 11       	cpse	r22, r1
     6c0:	79 c0       	rjmp	.+242    	; 0x7b4 <pinDirection+0x118>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     6c2:	4a b3       	in	r20, 0x1a	; 26
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	b9 01       	movw	r22, r18
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <pinDirection+0x34>
     6cc:	66 0f       	add	r22, r22
     6ce:	77 1f       	adc	r23, r23
     6d0:	8a 95       	dec	r24
     6d2:	e2 f7       	brpl	.-8      	; 0x6cc <pinDirection+0x30>
     6d4:	cb 01       	movw	r24, r22
     6d6:	80 95       	com	r24
     6d8:	84 23       	and	r24, r20
     6da:	8a bb       	out	0x1a, r24	; 26
     6dc:	08 95       	ret
		else{}
	}
	else if((pinNo >= PBU0) && (pinNo <= PBU7)){
     6de:	98 ef       	ldi	r25, 0xF8	; 248
     6e0:	98 0f       	add	r25, r24
     6e2:	98 30       	cpi	r25, 0x08	; 8
     6e4:	00 f5       	brcc	.+64     	; 0x726 <pinDirection+0x8a>
		if(direction == OUTPUT)
     6e6:	61 30       	cpi	r22, 0x01	; 1
     6e8:	69 f4       	brne	.+26     	; 0x704 <pinDirection+0x68>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     6ea:	47 b3       	in	r20, 0x17	; 23
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	b9 01       	movw	r22, r18
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <pinDirection+0x5c>
     6f4:	66 0f       	add	r22, r22
     6f6:	77 1f       	adc	r23, r23
     6f8:	9a 95       	dec	r25
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <pinDirection+0x58>
     6fc:	cb 01       	movw	r24, r22
     6fe:	84 2b       	or	r24, r20
     700:	87 bb       	out	0x17, r24	; 23
     702:	08 95       	ret
		else if(direction == LOW)
     704:	61 11       	cpse	r22, r1
     706:	56 c0       	rjmp	.+172    	; 0x7b4 <pinDirection+0x118>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     708:	47 b3       	in	r20, 0x17	; 23
     70a:	88 50       	subi	r24, 0x08	; 8
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	b9 01       	movw	r22, r18
     712:	02 c0       	rjmp	.+4      	; 0x718 <pinDirection+0x7c>
     714:	66 0f       	add	r22, r22
     716:	77 1f       	adc	r23, r23
     718:	8a 95       	dec	r24
     71a:	e2 f7       	brpl	.-8      	; 0x714 <pinDirection+0x78>
     71c:	cb 01       	movw	r24, r22
     71e:	80 95       	com	r24
     720:	84 23       	and	r24, r20
     722:	87 bb       	out	0x17, r24	; 23
     724:	08 95       	ret
		else{}
	}
	else if((pinNo >= PCU0) && (pinNo <= PCU7)){
     726:	90 ef       	ldi	r25, 0xF0	; 240
     728:	98 0f       	add	r25, r24
     72a:	98 30       	cpi	r25, 0x08	; 8
     72c:	00 f5       	brcc	.+64     	; 0x76e <pinDirection+0xd2>
		if(direction == OUTPUT)
     72e:	61 30       	cpi	r22, 0x01	; 1
     730:	69 f4       	brne	.+26     	; 0x74c <pinDirection+0xb0>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     732:	44 b3       	in	r20, 0x14	; 20
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	b9 01       	movw	r22, r18
     73a:	02 c0       	rjmp	.+4      	; 0x740 <pinDirection+0xa4>
     73c:	66 0f       	add	r22, r22
     73e:	77 1f       	adc	r23, r23
     740:	9a 95       	dec	r25
     742:	e2 f7       	brpl	.-8      	; 0x73c <pinDirection+0xa0>
     744:	cb 01       	movw	r24, r22
     746:	84 2b       	or	r24, r20
     748:	84 bb       	out	0x14, r24	; 20
     74a:	08 95       	ret
		else if(direction==INPUT)
     74c:	61 11       	cpse	r22, r1
     74e:	32 c0       	rjmp	.+100    	; 0x7b4 <pinDirection+0x118>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     750:	44 b3       	in	r20, 0x14	; 20
     752:	80 51       	subi	r24, 0x10	; 16
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	b9 01       	movw	r22, r18
     75a:	02 c0       	rjmp	.+4      	; 0x760 <pinDirection+0xc4>
     75c:	66 0f       	add	r22, r22
     75e:	77 1f       	adc	r23, r23
     760:	8a 95       	dec	r24
     762:	e2 f7       	brpl	.-8      	; 0x75c <pinDirection+0xc0>
     764:	cb 01       	movw	r24, r22
     766:	80 95       	com	r24
     768:	84 23       	and	r24, r20
     76a:	84 bb       	out	0x14, r24	; 20
     76c:	08 95       	ret
		else{}
	}
	else if((pinNo >= PDU0) && (pinNo <= PDU7)){
     76e:	98 ee       	ldi	r25, 0xE8	; 232
     770:	98 0f       	add	r25, r24
     772:	98 30       	cpi	r25, 0x08	; 8
     774:	f8 f4       	brcc	.+62     	; 0x7b4 <pinDirection+0x118>
		if(direction == OUTPUT)
     776:	61 30       	cpi	r22, 0x01	; 1
     778:	69 f4       	brne	.+26     	; 0x794 <pinDirection+0xf8>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     77a:	41 b3       	in	r20, 0x11	; 17
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	b9 01       	movw	r22, r18
     782:	02 c0       	rjmp	.+4      	; 0x788 <pinDirection+0xec>
     784:	66 0f       	add	r22, r22
     786:	77 1f       	adc	r23, r23
     788:	9a 95       	dec	r25
     78a:	e2 f7       	brpl	.-8      	; 0x784 <pinDirection+0xe8>
     78c:	cb 01       	movw	r24, r22
     78e:	84 2b       	or	r24, r20
     790:	81 bb       	out	0x11, r24	; 17
     792:	08 95       	ret
		else if(direction == INPUT)
     794:	61 11       	cpse	r22, r1
     796:	0e c0       	rjmp	.+28     	; 0x7b4 <pinDirection+0x118>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     798:	41 b3       	in	r20, 0x11	; 17
     79a:	88 51       	subi	r24, 0x18	; 24
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	b9 01       	movw	r22, r18
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <pinDirection+0x10c>
     7a4:	66 0f       	add	r22, r22
     7a6:	77 1f       	adc	r23, r23
     7a8:	8a 95       	dec	r24
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <pinDirection+0x108>
     7ac:	cb 01       	movw	r24, r22
     7ae:	80 95       	com	r24
     7b0:	84 23       	and	r24, r20
     7b2:	81 bb       	out	0x11, r24	; 17
     7b4:	08 95       	ret

000007b6 <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PAU0)&&(pinNo<=PAU7))
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	58 f4       	brcc	.+22     	; 0x7d0 <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     7ba:	29 b3       	in	r18, 0x19	; 25
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <readPin+0x10>
     7c2:	55 95       	asr	r21
     7c4:	47 95       	ror	r20
     7c6:	8a 95       	dec	r24
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <readPin+0xc>
     7ca:	ca 01       	movw	r24, r20
     7cc:	81 70       	andi	r24, 0x01	; 1
     7ce:	08 95       	ret
	else if((pinNo>=PBU0)&&(pinNo<=PBU7))
     7d0:	98 ef       	ldi	r25, 0xF8	; 248
     7d2:	98 0f       	add	r25, r24
     7d4:	98 30       	cpi	r25, 0x08	; 8
     7d6:	58 f4       	brcc	.+22     	; 0x7ee <readPin+0x38>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     7d8:	26 b3       	in	r18, 0x16	; 22
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	a9 01       	movw	r20, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <readPin+0x2e>
     7e0:	55 95       	asr	r21
     7e2:	47 95       	ror	r20
     7e4:	9a 95       	dec	r25
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <readPin+0x2a>
     7e8:	ca 01       	movw	r24, r20
     7ea:	81 70       	andi	r24, 0x01	; 1
     7ec:	08 95       	ret
	else if((pinNo>=PCU0)&&(pinNo<=PCU7))
     7ee:	90 ef       	ldi	r25, 0xF0	; 240
     7f0:	98 0f       	add	r25, r24
     7f2:	98 30       	cpi	r25, 0x08	; 8
     7f4:	58 f4       	brcc	.+22     	; 0x80c <readPin+0x56>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     7f6:	23 b3       	in	r18, 0x13	; 19
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	a9 01       	movw	r20, r18
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <readPin+0x4c>
     7fe:	55 95       	asr	r21
     800:	47 95       	ror	r20
     802:	9a 95       	dec	r25
     804:	e2 f7       	brpl	.-8      	; 0x7fe <readPin+0x48>
     806:	ca 01       	movw	r24, r20
     808:	81 70       	andi	r24, 0x01	; 1
     80a:	08 95       	ret
	else if((pinNo>=PDU0)&&(pinNo<=PDU7))
     80c:	98 ee       	ldi	r25, 0xE8	; 232
     80e:	98 0f       	add	r25, r24
     810:	98 30       	cpi	r25, 0x08	; 8
     812:	58 f4       	brcc	.+22     	; 0x82a <readPin+0x74>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     814:	20 b3       	in	r18, 0x10	; 16
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	a9 01       	movw	r20, r18
     81a:	02 c0       	rjmp	.+4      	; 0x820 <readPin+0x6a>
     81c:	55 95       	asr	r21
     81e:	47 95       	ror	r20
     820:	9a 95       	dec	r25
     822:	e2 f7       	brpl	.-8      	; 0x81c <readPin+0x66>
     824:	ca 01       	movw	r24, r20
     826:	81 70       	andi	r24, 0x01	; 1
     828:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     82a:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PDU0)&&(pinNo<=PDU7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     82c:	08 95       	ret

0000082e <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     82e:	41 30       	cpi	r20, 0x01	; 1
     830:	29 f4       	brne	.+10     	; 0x83c <writePins+0xe>
		SETBits(*port,mask);
     832:	fc 01       	movw	r30, r24
     834:	20 81       	ld	r18, Z
     836:	62 2b       	or	r22, r18
     838:	60 83       	st	Z, r22
     83a:	08 95       	ret
	else if(logic==LOW)
     83c:	41 11       	cpse	r20, r1
     83e:	05 c0       	rjmp	.+10     	; 0x84a <writePins+0x1c>
		CLRBits(*port,mask);
     840:	fc 01       	movw	r30, r24
     842:	20 81       	ld	r18, Z
     844:	60 95       	com	r22
     846:	62 23       	and	r22, r18
     848:	60 83       	st	Z, r22
     84a:	08 95       	ret

0000084c <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     84c:	41 30       	cpi	r20, 0x01	; 1
     84e:	29 f4       	brne	.+10     	; 0x85a <pinsDirection+0xe>
		SETBits(*ddr,mask);
     850:	fc 01       	movw	r30, r24
     852:	20 81       	ld	r18, Z
     854:	62 2b       	or	r22, r18
     856:	60 83       	st	Z, r22
     858:	08 95       	ret
	else if(direction == INPUT)
     85a:	41 11       	cpse	r20, r1
     85c:	05 c0       	rjmp	.+10     	; 0x868 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     85e:	fc 01       	movw	r30, r24
     860:	20 81       	ld	r18, Z
     862:	60 95       	com	r22
     864:	62 23       	and	r22, r18
     866:	60 83       	st	Z, r22
     868:	08 95       	ret

0000086a <Uart_Init>:
     86a:	cf 93       	push	r28
     86c:	c8 2f       	mov	r28, r24
     86e:	db 01       	movw	r26, r22
     870:	ca 01       	movw	r24, r20
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	aa 1f       	adc	r26, r26
     878:	bb 1f       	adc	r27, r27
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	aa 1f       	adc	r26, r26
     880:	bb 1f       	adc	r27, r27
     882:	9c 01       	movw	r18, r24
     884:	ad 01       	movw	r20, r26
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	44 1f       	adc	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	44 1f       	adc	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	72 e1       	ldi	r23, 0x12	; 18
     89a:	8a e7       	ldi	r24, 0x7A	; 122
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 b8 11 	call	0x2370	; 0x2370 <__udivmodsi4>
     8a2:	21 50       	subi	r18, 0x01	; 1
     8a4:	31 09       	sbc	r19, r1
     8a6:	cc 23       	and	r28, r28
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <Uart_Init+0x46>
     8aa:	c1 30       	cpi	r28, 0x01	; 1
     8ac:	51 f0       	breq	.+20     	; 0x8c2 <Uart_Init+0x58>
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <Uart_Init+0x6c>
     8b0:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     8b4:	29 b9       	out	0x09, r18	; 9
     8b6:	88 e1       	ldi	r24, 0x18	; 24
     8b8:	8a b9       	out	0x0a, r24	; 10
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <Uart_Init+0x6c>
     8c2:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     8c6:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     8ca:	88 e1       	ldi	r24, 0x18	; 24
     8cc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     8d0:	86 e0       	ldi	r24, 0x06	; 6
     8d2:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <Uart_SendByte>:
     8da:	88 23       	and	r24, r24
     8dc:	19 f0       	breq	.+6      	; 0x8e4 <Uart_SendByte+0xa>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	29 f0       	breq	.+10     	; 0x8ec <Uart_SendByte+0x12>
     8e2:	08 95       	ret
     8e4:	5d 9b       	sbis	0x0b, 5	; 11
     8e6:	fe cf       	rjmp	.-4      	; 0x8e4 <Uart_SendByte+0xa>
     8e8:	6c b9       	out	0x0c, r22	; 12
     8ea:	08 95       	ret
     8ec:	eb e9       	ldi	r30, 0x9B	; 155
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	85 ff       	sbrs	r24, 5
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <Uart_SendByte+0x16>
     8f6:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     8fa:	08 95       	ret

000008fc <Uart_SendStr>:
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	eb 01       	movw	r28, r22
     904:	68 81       	ld	r22, Y
     906:	66 23       	and	r22, r22
     908:	39 f0       	breq	.+14     	; 0x918 <Uart_SendStr+0x1c>
     90a:	18 2f       	mov	r17, r24
     90c:	21 96       	adiw	r28, 0x01	; 1
     90e:	81 2f       	mov	r24, r17
     910:	e4 df       	rcall	.-56     	; 0x8da <Uart_SendByte>
     912:	69 91       	ld	r22, Y+
     914:	61 11       	cpse	r22, r1
     916:	fb cf       	rjmp	.-10     	; 0x90e <Uart_SendStr+0x12>
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	08 95       	ret

00000920 <pvPortMalloc>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	fa d5       	rcall	.+3060   	; 0x151c <vTaskSuspendAll>
     928:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     92c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
     930:	89 2b       	or	r24, r25
     932:	31 f4       	brne	.+12     	; 0x940 <pvPortMalloc+0x20>
     934:	81 e1       	ldi	r24, 0x11	; 17
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
     93c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
     940:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <xNextFreeByte>
     944:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <xNextFreeByte+0x1>
     948:	c9 01       	movw	r24, r18
     94a:	8c 0f       	add	r24, r28
     94c:	9d 1f       	adc	r25, r29
     94e:	8f 3c       	cpi	r24, 0xCF	; 207
     950:	47 e0       	ldi	r20, 0x07	; 7
     952:	94 07       	cpc	r25, r20
     954:	70 f4       	brcc	.+28     	; 0x972 <pvPortMalloc+0x52>
     956:	28 17       	cp	r18, r24
     958:	39 07       	cpc	r19, r25
     95a:	70 f4       	brcc	.+28     	; 0x978 <pvPortMalloc+0x58>
     95c:	c0 91 0c 02 	lds	r28, 0x020C	; 0x80020c <__data_end>
     960:	d0 91 0d 02 	lds	r29, 0x020D	; 0x80020d <__data_end+0x1>
     964:	c2 0f       	add	r28, r18
     966:	d3 1f       	adc	r29, r19
     968:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <xNextFreeByte+0x1>
     96c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <xNextFreeByte>
     970:	05 c0       	rjmp	.+10     	; 0x97c <pvPortMalloc+0x5c>
     972:	c0 e0       	ldi	r28, 0x00	; 0
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <pvPortMalloc+0x5c>
     978:	c0 e0       	ldi	r28, 0x00	; 0
     97a:	d0 e0       	ldi	r29, 0x00	; 0
     97c:	8e d6       	rcall	.+3356   	; 0x169a <xTaskResumeAll>
     97e:	ce 01       	movw	r24, r28
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <vPortFree>:
     986:	08 95       	ret

00000988 <vListInitialise>:
     988:	fc 01       	movw	r30, r24
     98a:	03 96       	adiw	r24, 0x03	; 3
     98c:	92 83       	std	Z+2, r25	; 0x02
     98e:	81 83       	std	Z+1, r24	; 0x01
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	34 83       	std	Z+4, r19	; 0x04
     996:	23 83       	std	Z+3, r18	; 0x03
     998:	96 83       	std	Z+6, r25	; 0x06
     99a:	85 83       	std	Z+5, r24	; 0x05
     99c:	90 87       	std	Z+8, r25	; 0x08
     99e:	87 83       	std	Z+7, r24	; 0x07
     9a0:	10 82       	st	Z, r1
     9a2:	08 95       	ret

000009a4 <vListInitialiseItem>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	11 86       	std	Z+9, r1	; 0x09
     9a8:	10 86       	std	Z+8, r1	; 0x08
     9aa:	08 95       	ret

000009ac <vListInsertEnd>:
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	9c 01       	movw	r18, r24
     9b2:	fb 01       	movw	r30, r22
     9b4:	dc 01       	movw	r26, r24
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	cd 91       	ld	r28, X+
     9ba:	dc 91       	ld	r29, X
     9bc:	12 97       	sbiw	r26, 0x02	; 2
     9be:	d3 83       	std	Z+3, r29	; 0x03
     9c0:	c2 83       	std	Z+2, r28	; 0x02
     9c2:	8c 81       	ldd	r24, Y+4	; 0x04
     9c4:	9d 81       	ldd	r25, Y+5	; 0x05
     9c6:	95 83       	std	Z+5, r25	; 0x05
     9c8:	84 83       	std	Z+4, r24	; 0x04
     9ca:	8c 81       	ldd	r24, Y+4	; 0x04
     9cc:	9d 81       	ldd	r25, Y+5	; 0x05
     9ce:	dc 01       	movw	r26, r24
     9d0:	13 96       	adiw	r26, 0x03	; 3
     9d2:	7c 93       	st	X, r23
     9d4:	6e 93       	st	-X, r22
     9d6:	12 97       	sbiw	r26, 0x02	; 2
     9d8:	7d 83       	std	Y+5, r23	; 0x05
     9da:	6c 83       	std	Y+4, r22	; 0x04
     9dc:	31 87       	std	Z+9, r19	; 0x09
     9de:	20 87       	std	Z+8, r18	; 0x08
     9e0:	f9 01       	movw	r30, r18
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	80 83       	st	Z, r24
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <vListInsert>:
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	eb 01       	movw	r28, r22
     9f4:	48 81       	ld	r20, Y
     9f6:	59 81       	ldd	r21, Y+1	; 0x01
     9f8:	4f 3f       	cpi	r20, 0xFF	; 255
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	52 07       	cpc	r21, r18
     9fe:	21 f4       	brne	.+8      	; 0xa08 <vListInsert+0x1a>
     a00:	fc 01       	movw	r30, r24
     a02:	a7 81       	ldd	r26, Z+7	; 0x07
     a04:	b0 85       	ldd	r27, Z+8	; 0x08
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <vListInsert+0x34>
     a08:	dc 01       	movw	r26, r24
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <vListInsert+0x22>
     a0e:	df 01       	movw	r26, r30
     a10:	12 96       	adiw	r26, 0x02	; 2
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	13 97       	sbiw	r26, 0x03	; 3
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	42 17       	cp	r20, r18
     a1e:	53 07       	cpc	r21, r19
     a20:	b0 f7       	brcc	.-20     	; 0xa0e <vListInsert+0x20>
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	13 97       	sbiw	r26, 0x03	; 3
     a2a:	fb 83       	std	Y+3, r31	; 0x03
     a2c:	ea 83       	std	Y+2, r30	; 0x02
     a2e:	d5 83       	std	Z+5, r29	; 0x05
     a30:	c4 83       	std	Z+4, r28	; 0x04
     a32:	bd 83       	std	Y+5, r27	; 0x05
     a34:	ac 83       	std	Y+4, r26	; 0x04
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	dc 93       	st	X, r29
     a3a:	ce 93       	st	-X, r28
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	99 87       	std	Y+9, r25	; 0x09
     a40:	88 87       	std	Y+8, r24	; 0x08
     a42:	fc 01       	movw	r30, r24
     a44:	20 81       	ld	r18, Z
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	20 83       	st	Z, r18
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <uxListRemove>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	fc 01       	movw	r30, r24
     a56:	a0 85       	ldd	r26, Z+8	; 0x08
     a58:	b1 85       	ldd	r27, Z+9	; 0x09
     a5a:	c2 81       	ldd	r28, Z+2	; 0x02
     a5c:	d3 81       	ldd	r29, Z+3	; 0x03
     a5e:	84 81       	ldd	r24, Z+4	; 0x04
     a60:	95 81       	ldd	r25, Z+5	; 0x05
     a62:	9d 83       	std	Y+5, r25	; 0x05
     a64:	8c 83       	std	Y+4, r24	; 0x04
     a66:	c4 81       	ldd	r28, Z+4	; 0x04
     a68:	d5 81       	ldd	r29, Z+5	; 0x05
     a6a:	82 81       	ldd	r24, Z+2	; 0x02
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	9b 83       	std	Y+3, r25	; 0x03
     a70:	8a 83       	std	Y+2, r24	; 0x02
     a72:	11 96       	adiw	r26, 0x01	; 1
     a74:	8d 91       	ld	r24, X+
     a76:	9c 91       	ld	r25, X
     a78:	12 97       	sbiw	r26, 0x02	; 2
     a7a:	e8 17       	cp	r30, r24
     a7c:	f9 07       	cpc	r31, r25
     a7e:	31 f4       	brne	.+12     	; 0xa8c <uxListRemove+0x3c>
     a80:	84 81       	ldd	r24, Z+4	; 0x04
     a82:	95 81       	ldd	r25, Z+5	; 0x05
     a84:	12 96       	adiw	r26, 0x02	; 2
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	11 97       	sbiw	r26, 0x01	; 1
     a8c:	11 86       	std	Z+9, r1	; 0x09
     a8e:	10 86       	std	Z+8, r1	; 0x08
     a90:	8c 91       	ld	r24, X
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	8c 93       	st	X, r24
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <pxPortInitialiseStack>:
     a9c:	31 e1       	ldi	r19, 0x11	; 17
     a9e:	fc 01       	movw	r30, r24
     aa0:	30 83       	st	Z, r19
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	22 e2       	ldi	r18, 0x22	; 34
     aa6:	20 83       	st	Z, r18
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	a3 e3       	ldi	r26, 0x33	; 51
     aac:	a0 83       	st	Z, r26
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	70 83       	st	Z, r23
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	10 82       	st	Z, r1
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	10 82       	st	Z, r1
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	60 83       	st	Z, r22
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	63 e0       	ldi	r22, 0x03	; 3
     ace:	60 83       	st	Z, r22
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	60 83       	st	Z, r22
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	65 e0       	ldi	r22, 0x05	; 5
     ada:	60 83       	st	Z, r22
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	60 83       	st	Z, r22
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	67 e0       	ldi	r22, 0x07	; 7
     ae6:	60 83       	st	Z, r22
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	68 e0       	ldi	r22, 0x08	; 8
     aec:	60 83       	st	Z, r22
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	69 e0       	ldi	r22, 0x09	; 9
     af2:	60 83       	st	Z, r22
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	60 e1       	ldi	r22, 0x10	; 16
     af8:	60 83       	st	Z, r22
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	30 83       	st	Z, r19
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	32 e1       	ldi	r19, 0x12	; 18
     b02:	30 83       	st	Z, r19
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	33 e1       	ldi	r19, 0x13	; 19
     b08:	30 83       	st	Z, r19
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	34 e1       	ldi	r19, 0x14	; 20
     b0e:	30 83       	st	Z, r19
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	35 e1       	ldi	r19, 0x15	; 21
     b14:	30 83       	st	Z, r19
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	36 e1       	ldi	r19, 0x16	; 22
     b1a:	30 83       	st	Z, r19
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	37 e1       	ldi	r19, 0x17	; 23
     b20:	30 83       	st	Z, r19
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	38 e1       	ldi	r19, 0x18	; 24
     b26:	30 83       	st	Z, r19
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	39 e1       	ldi	r19, 0x19	; 25
     b2c:	30 83       	st	Z, r19
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	30 e2       	ldi	r19, 0x20	; 32
     b32:	30 83       	st	Z, r19
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	31 e2       	ldi	r19, 0x21	; 33
     b38:	30 83       	st	Z, r19
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	20 83       	st	Z, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	23 e2       	ldi	r18, 0x23	; 35
     b42:	20 83       	st	Z, r18
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	40 83       	st	Z, r20
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	50 83       	st	Z, r21
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	26 e2       	ldi	r18, 0x26	; 38
     b50:	20 83       	st	Z, r18
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	27 e2       	ldi	r18, 0x27	; 39
     b56:	20 83       	st	Z, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	28 e2       	ldi	r18, 0x28	; 40
     b5c:	20 83       	st	Z, r18
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	29 e2       	ldi	r18, 0x29	; 41
     b62:	20 83       	st	Z, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	20 e3       	ldi	r18, 0x30	; 48
     b68:	20 83       	st	Z, r18
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	21 e3       	ldi	r18, 0x31	; 49
     b6e:	20 83       	st	Z, r18
     b70:	86 97       	sbiw	r24, 0x26	; 38
     b72:	08 95       	ret

00000b74 <xPortStartScheduler>:
     b74:	1b bc       	out	0x2b, r1	; 43
     b76:	8c e7       	ldi	r24, 0x7C	; 124
     b78:	8a bd       	out	0x2a, r24	; 42
     b7a:	8b e0       	ldi	r24, 0x0B	; 11
     b7c:	8e bd       	out	0x2e, r24	; 46
     b7e:	87 b7       	in	r24, 0x37	; 55
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	87 bf       	out	0x37, r24	; 55
     b84:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
     b88:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
     b8c:	cd 91       	ld	r28, X+
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	dd 91       	ld	r29, X+
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	7f 91       	pop	r23
     ba6:	6f 91       	pop	r22
     ba8:	5f 91       	pop	r21
     baa:	4f 91       	pop	r20
     bac:	3f 91       	pop	r19
     bae:	2f 91       	pop	r18
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	df 90       	pop	r13
     bba:	cf 90       	pop	r12
     bbc:	bf 90       	pop	r11
     bbe:	af 90       	pop	r10
     bc0:	9f 90       	pop	r9
     bc2:	8f 90       	pop	r8
     bc4:	7f 90       	pop	r7
     bc6:	6f 90       	pop	r6
     bc8:	5f 90       	pop	r5
     bca:	4f 90       	pop	r4
     bcc:	3f 90       	pop	r3
     bce:	2f 90       	pop	r2
     bd0:	1f 90       	pop	r1
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	08 95       	ret
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret

00000bde <vPortYield>:
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	0f 92       	push	r0
     be6:	1f 92       	push	r1
     be8:	11 24       	eor	r1, r1
     bea:	2f 92       	push	r2
     bec:	3f 92       	push	r3
     bee:	4f 92       	push	r4
     bf0:	5f 92       	push	r5
     bf2:	6f 92       	push	r6
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
     c2a:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
     c2e:	0d b6       	in	r0, 0x3d	; 61
     c30:	0d 92       	st	X+, r0
     c32:	0e b6       	in	r0, 0x3e	; 62
     c34:	0d 92       	st	X+, r0
     c36:	00 d6       	rcall	.+3072   	; 0x1838 <vTaskSwitchContext>
     c38:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
     c3c:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
     c40:	cd 91       	ld	r28, X+
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	dd 91       	ld	r29, X+
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	af 90       	pop	r10
     c74:	9f 90       	pop	r9
     c76:	8f 90       	pop	r8
     c78:	7f 90       	pop	r7
     c7a:	6f 90       	pop	r6
     c7c:	5f 90       	pop	r5
     c7e:	4f 90       	pop	r4
     c80:	3f 90       	pop	r3
     c82:	2f 90       	pop	r2
     c84:	1f 90       	pop	r1
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	08 95       	ret

00000c8e <vPortYieldFromTick>:
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	0f 92       	push	r0
     c96:	1f 92       	push	r1
     c98:	11 24       	eor	r1, r1
     c9a:	2f 92       	push	r2
     c9c:	3f 92       	push	r3
     c9e:	4f 92       	push	r4
     ca0:	5f 92       	push	r5
     ca2:	6f 92       	push	r6
     ca4:	7f 92       	push	r7
     ca6:	8f 92       	push	r8
     ca8:	9f 92       	push	r9
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
     cda:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
     cde:	0d b6       	in	r0, 0x3d	; 61
     ce0:	0d 92       	st	X+, r0
     ce2:	0e b6       	in	r0, 0x3e	; 62
     ce4:	0d 92       	st	X+, r0
     ce6:	20 d4       	rcall	.+2112   	; 0x1528 <xTaskIncrementTick>
     ce8:	81 11       	cpse	r24, r1
     cea:	a6 d5       	rcall	.+2892   	; 0x1838 <vTaskSwitchContext>
     cec:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
     cf0:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
     cf4:	cd 91       	ld	r28, X+
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	dd 91       	ld	r29, X+
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	9f 90       	pop	r9
     d2a:	8f 90       	pop	r8
     d2c:	7f 90       	pop	r7
     d2e:	6f 90       	pop	r6
     d30:	5f 90       	pop	r5
     d32:	4f 90       	pop	r4
     d34:	3f 90       	pop	r3
     d36:	2f 90       	pop	r2
     d38:	1f 90       	pop	r1
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	08 95       	ret

00000d42 <__vector_12>:
     d42:	a5 df       	rcall	.-182    	; 0xc8e <vPortYieldFromTick>
     d44:	18 95       	reti

00000d46 <prvCopyDataToQueue>:
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
     d4e:	14 2f       	mov	r17, r20
     d50:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d52:	41 11       	cpse	r20, r1
     d54:	0b c0       	rjmp	.+22     	; 0xd6c <prvCopyDataToQueue+0x26>
     d56:	88 81       	ld	r24, Y
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	89 2b       	or	r24, r25
     d5c:	09 f0       	breq	.+2      	; 0xd60 <prvCopyDataToQueue+0x1a>
     d5e:	44 c0       	rjmp	.+136    	; 0xde8 <prvCopyDataToQueue+0xa2>
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	d6 d6       	rcall	.+3500   	; 0x1b12 <xTaskPriorityDisinherit>
     d66:	1b 82       	std	Y+3, r1	; 0x03
     d68:	1a 82       	std	Y+2, r1	; 0x02
     d6a:	45 c0       	rjmp	.+138    	; 0xdf6 <prvCopyDataToQueue+0xb0>
     d6c:	11 11       	cpse	r17, r1
     d6e:	17 c0       	rjmp	.+46     	; 0xd9e <prvCopyDataToQueue+0x58>
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <memcpy>
     d7a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	82 0f       	add	r24, r18
     d82:	91 1d       	adc	r25, r1
     d84:	9d 83       	std	Y+5, r25	; 0x05
     d86:	8c 83       	std	Y+4, r24	; 0x04
     d88:	2a 81       	ldd	r18, Y+2	; 0x02
     d8a:	3b 81       	ldd	r19, Y+3	; 0x03
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	68 f1       	brcs	.+90     	; 0xdec <prvCopyDataToQueue+0xa6>
     d92:	88 81       	ld	r24, Y
     d94:	99 81       	ldd	r25, Y+1	; 0x01
     d96:	9d 83       	std	Y+5, r25	; 0x05
     d98:	8c 83       	std	Y+4, r24	; 0x04
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	2c c0       	rjmp	.+88     	; 0xdf6 <prvCopyDataToQueue+0xb0>
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	9f 81       	ldd	r25, Y+7	; 0x07
     da4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <memcpy>
     da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	91 95       	neg	r25
     dae:	81 95       	neg	r24
     db0:	91 09       	sbc	r25, r1
     db2:	2e 81       	ldd	r18, Y+6	; 0x06
     db4:	3f 81       	ldd	r19, Y+7	; 0x07
     db6:	28 0f       	add	r18, r24
     db8:	39 1f       	adc	r19, r25
     dba:	3f 83       	std	Y+7, r19	; 0x07
     dbc:	2e 83       	std	Y+6, r18	; 0x06
     dbe:	48 81       	ld	r20, Y
     dc0:	59 81       	ldd	r21, Y+1	; 0x01
     dc2:	24 17       	cp	r18, r20
     dc4:	35 07       	cpc	r19, r21
     dc6:	30 f4       	brcc	.+12     	; 0xdd4 <prvCopyDataToQueue+0x8e>
     dc8:	2a 81       	ldd	r18, Y+2	; 0x02
     dca:	3b 81       	ldd	r19, Y+3	; 0x03
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	9f 83       	std	Y+7, r25	; 0x07
     dd2:	8e 83       	std	Y+6, r24	; 0x06
     dd4:	12 30       	cpi	r17, 0x02	; 2
     dd6:	61 f4       	brne	.+24     	; 0xdf0 <prvCopyDataToQueue+0xaa>
     dd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dda:	88 23       	and	r24, r24
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <prvCopyDataToQueue+0xae>
     dde:	8a 8d       	ldd	r24, Y+26	; 0x1a
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	8a 8f       	std	Y+26, r24	; 0x1a
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <prvCopyDataToQueue+0xb0>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <prvCopyDataToQueue+0xb0>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <prvCopyDataToQueue+0xb0>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <prvCopyDataToQueue+0xb0>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	9a 8f       	std	Y+26, r25	; 0x1a
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	08 95       	ret

00000e04 <prvCopyDataFromQueue>:
     e04:	fc 01       	movw	r30, r24
     e06:	44 8d       	ldd	r20, Z+28	; 0x1c
     e08:	44 23       	and	r20, r20
     e0a:	a9 f0       	breq	.+42     	; 0xe36 <prvCopyDataFromQueue+0x32>
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	26 81       	ldd	r18, Z+6	; 0x06
     e10:	37 81       	ldd	r19, Z+7	; 0x07
     e12:	24 0f       	add	r18, r20
     e14:	35 1f       	adc	r19, r21
     e16:	37 83       	std	Z+7, r19	; 0x07
     e18:	26 83       	std	Z+6, r18	; 0x06
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	28 17       	cp	r18, r24
     e20:	39 07       	cpc	r19, r25
     e22:	20 f0       	brcs	.+8      	; 0xe2c <prvCopyDataFromQueue+0x28>
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	97 83       	std	Z+7, r25	; 0x07
     e2a:	86 83       	std	Z+6, r24	; 0x06
     e2c:	cb 01       	movw	r24, r22
     e2e:	66 81       	ldd	r22, Z+6	; 0x06
     e30:	77 81       	ldd	r23, Z+7	; 0x07
     e32:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <memcpy>
     e36:	08 95       	ret

00000e38 <prvUnlockQueue>:
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	0f 92       	push	r0
     e48:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e4a:	18 16       	cp	r1, r24
     e4c:	ac f4       	brge	.+42     	; 0xe78 <prvUnlockQueue+0x40>
     e4e:	89 89       	ldd	r24, Y+17	; 0x11
     e50:	81 11       	cpse	r24, r1
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <prvUnlockQueue+0x26>
     e54:	11 c0       	rjmp	.+34     	; 0xe78 <prvUnlockQueue+0x40>
     e56:	89 89       	ldd	r24, Y+17	; 0x11
     e58:	81 11       	cpse	r24, r1
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <prvUnlockQueue+0x2c>
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <prvUnlockQueue+0x40>
     e5e:	8e 01       	movw	r16, r28
     e60:	0f 5e       	subi	r16, 0xEF	; 239
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	c8 01       	movw	r24, r16
     e66:	6f d5       	rcall	.+2782   	; 0x1946 <xTaskRemoveFromEventList>
     e68:	81 11       	cpse	r24, r1
     e6a:	ed d5       	rcall	.+3034   	; 0x1a46 <vTaskMissedYield>
     e6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	8e 8f       	std	Y+30, r24	; 0x1e
     e72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e74:	18 16       	cp	r1, r24
     e76:	7c f3       	brlt	.-34     	; 0xe56 <prvUnlockQueue+0x1e>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	8e 8f       	std	Y+30, r24	; 0x1e
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	18 16       	cp	r1, r24
     e8a:	ac f4       	brge	.+42     	; 0xeb6 <prvUnlockQueue+0x7e>
     e8c:	88 85       	ldd	r24, Y+8	; 0x08
     e8e:	81 11       	cpse	r24, r1
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <prvUnlockQueue+0x64>
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <prvUnlockQueue+0x7e>
     e94:	88 85       	ldd	r24, Y+8	; 0x08
     e96:	81 11       	cpse	r24, r1
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <prvUnlockQueue+0x6a>
     e9a:	0d c0       	rjmp	.+26     	; 0xeb6 <prvUnlockQueue+0x7e>
     e9c:	8e 01       	movw	r16, r28
     e9e:	08 5f       	subi	r16, 0xF8	; 248
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	c8 01       	movw	r24, r16
     ea4:	50 d5       	rcall	.+2720   	; 0x1946 <xTaskRemoveFromEventList>
     ea6:	81 11       	cpse	r24, r1
     ea8:	ce d5       	rcall	.+2972   	; 0x1a46 <vTaskMissedYield>
     eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	8d 8f       	std	Y+29, r24	; 0x1d
     eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb2:	18 16       	cp	r1, r24
     eb4:	7c f3       	brlt	.-34     	; 0xe94 <prvUnlockQueue+0x5c>
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	8d 8f       	std	Y+29, r24	; 0x1d
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <xQueueGenericReset>:
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	0f 92       	push	r0
     ed4:	48 81       	ld	r20, Y
     ed6:	59 81       	ldd	r21, Y+1	; 0x01
     ed8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ede:	72 9f       	mul	r23, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	73 9f       	mul	r23, r19
     ee4:	90 0d       	add	r25, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	fa 01       	movw	r30, r20
     eea:	e8 0f       	add	r30, r24
     eec:	f9 1f       	adc	r31, r25
     eee:	fb 83       	std	Y+3, r31	; 0x03
     ef0:	ea 83       	std	Y+2, r30	; 0x02
     ef2:	1a 8e       	std	Y+26, r1	; 0x1a
     ef4:	5d 83       	std	Y+5, r21	; 0x05
     ef6:	4c 83       	std	Y+4, r20	; 0x04
     ef8:	82 1b       	sub	r24, r18
     efa:	93 0b       	sbc	r25, r19
     efc:	84 0f       	add	r24, r20
     efe:	95 1f       	adc	r25, r21
     f00:	9f 83       	std	Y+7, r25	; 0x07
     f02:	8e 83       	std	Y+6, r24	; 0x06
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	8d 8f       	std	Y+29, r24	; 0x1d
     f08:	8e 8f       	std	Y+30, r24	; 0x1e
     f0a:	61 11       	cpse	r22, r1
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <xQueueGenericReset+0x5a>
     f0e:	88 85       	ldd	r24, Y+8	; 0x08
     f10:	88 23       	and	r24, r24
     f12:	69 f0       	breq	.+26     	; 0xf2e <xQueueGenericReset+0x66>
     f14:	ce 01       	movw	r24, r28
     f16:	08 96       	adiw	r24, 0x08	; 8
     f18:	16 d5       	rcall	.+2604   	; 0x1946 <xTaskRemoveFromEventList>
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	41 f4       	brne	.+16     	; 0xf2e <xQueueGenericReset+0x66>
     f1e:	5f de       	rcall	.-834    	; 0xbde <vPortYield>
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <xQueueGenericReset+0x66>
     f22:	ce 01       	movw	r24, r28
     f24:	08 96       	adiw	r24, 0x08	; 8
     f26:	30 dd       	rcall	.-1440   	; 0x988 <vListInitialise>
     f28:	ce 01       	movw	r24, r28
     f2a:	41 96       	adiw	r24, 0x11	; 17
     f2c:	2d dd       	rcall	.-1446   	; 0x988 <vListInitialise>
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <xQueueGenericCreate>:
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	88 23       	and	r24, r24
     f44:	e1 f0       	breq	.+56     	; 0xf7e <xQueueGenericCreate+0x44>
     f46:	06 2f       	mov	r16, r22
     f48:	18 2f       	mov	r17, r24
     f4a:	8f e1       	ldi	r24, 0x1F	; 31
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	e8 dc       	rcall	.-1584   	; 0x920 <pvPortMalloc>
     f50:	ec 01       	movw	r28, r24
     f52:	89 2b       	or	r24, r25
     f54:	b1 f0       	breq	.+44     	; 0xf82 <xQueueGenericCreate+0x48>
     f56:	10 9f       	mul	r17, r16
     f58:	c0 01       	movw	r24, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	e0 dc       	rcall	.-1600   	; 0x920 <pvPortMalloc>
     f60:	99 83       	std	Y+1, r25	; 0x01
     f62:	88 83       	st	Y, r24
     f64:	89 2b       	or	r24, r25
     f66:	31 f0       	breq	.+12     	; 0xf74 <xQueueGenericCreate+0x3a>
     f68:	1b 8f       	std	Y+27, r17	; 0x1b
     f6a:	0c 8f       	std	Y+28, r16	; 0x1c
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	ce 01       	movw	r24, r28
     f70:	ab df       	rcall	.-170    	; 0xec8 <xQueueGenericReset>
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <xQueueGenericCreate+0x48>
     f74:	ce 01       	movw	r24, r28
     f76:	07 dd       	rcall	.-1522   	; 0x986 <vPortFree>
     f78:	c0 e0       	ldi	r28, 0x00	; 0
     f7a:	d0 e0       	ldi	r29, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <xQueueGenericCreate+0x48>
     f7e:	c0 e0       	ldi	r28, 0x00	; 0
     f80:	d0 e0       	ldi	r29, 0x00	; 0
     f82:	ce 01       	movw	r24, r28
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <xQueueGenericSend>:
     f8e:	9f 92       	push	r9
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <xQueueGenericSend+0x18>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <xQueueGenericSend+0x1a>
     fa8:	1f 92       	push	r1
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	8c 01       	movw	r16, r24
     fb0:	6b 01       	movw	r12, r22
     fb2:	5d 83       	std	Y+5, r21	; 0x05
     fb4:	4c 83       	std	Y+4, r20	; 0x04
     fb6:	a2 2e       	mov	r10, r18
     fb8:	b1 2c       	mov	r11, r1
     fba:	99 24       	eor	r9, r9
     fbc:	93 94       	inc	r9
     fbe:	7c 01       	movw	r14, r24
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	e8 0e       	add	r14, r24
     fc4:	f1 1c       	adc	r15, r1
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
     fcc:	f8 01       	movw	r30, r16
     fce:	92 8d       	ldd	r25, Z+26	; 0x1a
     fd0:	83 8d       	ldd	r24, Z+27	; 0x1b
     fd2:	98 17       	cp	r25, r24
     fd4:	18 f0       	brcs	.+6      	; 0xfdc <xQueueGenericSend+0x4e>
     fd6:	f2 e0       	ldi	r31, 0x02	; 2
     fd8:	af 12       	cpse	r10, r31
     fda:	15 c0       	rjmp	.+42     	; 0x1006 <xQueueGenericSend+0x78>
     fdc:	4a 2d       	mov	r20, r10
     fde:	b6 01       	movw	r22, r12
     fe0:	c8 01       	movw	r24, r16
     fe2:	b1 de       	rcall	.-670    	; 0xd46 <prvCopyDataToQueue>
     fe4:	f8 01       	movw	r30, r16
     fe6:	91 89       	ldd	r25, Z+17	; 0x11
     fe8:	99 23       	and	r25, r25
     fea:	39 f0       	breq	.+14     	; 0xffa <xQueueGenericSend+0x6c>
     fec:	c8 01       	movw	r24, r16
     fee:	41 96       	adiw	r24, 0x11	; 17
     ff0:	aa d4       	rcall	.+2388   	; 0x1946 <xTaskRemoveFromEventList>
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	21 f4       	brne	.+8      	; 0xffe <xQueueGenericSend+0x70>
     ff6:	f3 dd       	rcall	.-1050   	; 0xbde <vPortYield>
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <xQueueGenericSend+0x70>
     ffa:	81 11       	cpse	r24, r1
     ffc:	f0 dd       	rcall	.-1056   	; 0xbde <vPortYield>
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	45 c0       	rjmp	.+138    	; 0x1090 <xQueueGenericSend+0x102>
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	89 2b       	or	r24, r25
    100c:	21 f4       	brne	.+8      	; 0x1016 <xQueueGenericSend+0x88>
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	3d c0       	rjmp	.+122    	; 0x1090 <xQueueGenericSend+0x102>
    1016:	b1 10       	cpse	r11, r1
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <xQueueGenericSend+0x94>
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	d7 d4       	rcall	.+2478   	; 0x19ce <vTaskSetTimeOutState>
    1020:	b9 2c       	mov	r11, r9
    1022:	0f 90       	pop	r0
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	7a d2       	rcall	.+1268   	; 0x151c <vTaskSuspendAll>
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	0f 92       	push	r0
    102e:	f8 01       	movw	r30, r16
    1030:	85 8d       	ldd	r24, Z+29	; 0x1d
    1032:	8f 3f       	cpi	r24, 0xFF	; 255
    1034:	09 f4       	brne	.+2      	; 0x1038 <xQueueGenericSend+0xaa>
    1036:	15 8e       	std	Z+29, r1	; 0x1d
    1038:	f8 01       	movw	r30, r16
    103a:	86 8d       	ldd	r24, Z+30	; 0x1e
    103c:	8f 3f       	cpi	r24, 0xFF	; 255
    103e:	09 f4       	brne	.+2      	; 0x1042 <xQueueGenericSend+0xb4>
    1040:	16 8e       	std	Z+30, r1	; 0x1e
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	be 01       	movw	r22, r28
    1048:	6c 5f       	subi	r22, 0xFC	; 252
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	c9 d4       	rcall	.+2450   	; 0x19e4 <xTaskCheckForTimeOut>
    1052:	81 11       	cpse	r24, r1
    1054:	19 c0       	rjmp	.+50     	; 0x1088 <xQueueGenericSend+0xfa>
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	0f 92       	push	r0
    105c:	f8 01       	movw	r30, r16
    105e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	83 8d       	ldd	r24, Z+27	; 0x1b
    1066:	98 13       	cpse	r25, r24
    1068:	0b c0       	rjmp	.+22     	; 0x1080 <xQueueGenericSend+0xf2>
    106a:	6c 81       	ldd	r22, Y+4	; 0x04
    106c:	7d 81       	ldd	r23, Y+5	; 0x05
    106e:	c7 01       	movw	r24, r14
    1070:	50 d4       	rcall	.+2208   	; 0x1912 <vTaskPlaceOnEventList>
    1072:	c8 01       	movw	r24, r16
    1074:	e1 de       	rcall	.-574    	; 0xe38 <prvUnlockQueue>
    1076:	11 d3       	rcall	.+1570   	; 0x169a <xTaskResumeAll>
    1078:	81 11       	cpse	r24, r1
    107a:	a5 cf       	rjmp	.-182    	; 0xfc6 <xQueueGenericSend+0x38>
    107c:	b0 dd       	rcall	.-1184   	; 0xbde <vPortYield>
    107e:	a3 cf       	rjmp	.-186    	; 0xfc6 <xQueueGenericSend+0x38>
    1080:	c8 01       	movw	r24, r16
    1082:	da de       	rcall	.-588    	; 0xe38 <prvUnlockQueue>
    1084:	0a d3       	rcall	.+1556   	; 0x169a <xTaskResumeAll>
    1086:	9f cf       	rjmp	.-194    	; 0xfc6 <xQueueGenericSend+0x38>
    1088:	c8 01       	movw	r24, r16
    108a:	d6 de       	rcall	.-596    	; 0xe38 <prvUnlockQueue>
    108c:	06 d3       	rcall	.+1548   	; 0x169a <xTaskResumeAll>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	bf 90       	pop	r11
    10ac:	af 90       	pop	r10
    10ae:	9f 90       	pop	r9
    10b0:	08 95       	ret

000010b2 <xQueueGenericReceive>:
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <xQueueGenericReceive+0x18>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <xQueueGenericReceive+0x1a>
    10cc:	1f 92       	push	r1
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	8c 01       	movw	r16, r24
    10d4:	6b 01       	movw	r12, r22
    10d6:	5d 83       	std	Y+5, r21	; 0x05
    10d8:	4c 83       	std	Y+4, r20	; 0x04
    10da:	92 2e       	mov	r9, r18
    10dc:	b1 2c       	mov	r11, r1
    10de:	aa 24       	eor	r10, r10
    10e0:	a3 94       	inc	r10
    10e2:	7c 01       	movw	r14, r24
    10e4:	81 e1       	ldi	r24, 0x11	; 17
    10e6:	e8 0e       	add	r14, r24
    10e8:	f1 1c       	adc	r15, r1
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	0f 92       	push	r0
    10f0:	f8 01       	movw	r30, r16
    10f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f4:	88 23       	and	r24, r24
    10f6:	69 f1       	breq	.+90     	; 0x1152 <__stack+0x53>
    10f8:	e6 80       	ldd	r14, Z+6	; 0x06
    10fa:	f7 80       	ldd	r15, Z+7	; 0x07
    10fc:	b6 01       	movw	r22, r12
    10fe:	c8 01       	movw	r24, r16
    1100:	81 de       	rcall	.-766    	; 0xe04 <prvCopyDataFromQueue>
    1102:	91 10       	cpse	r9, r1
    1104:	17 c0       	rjmp	.+46     	; 0x1134 <__stack+0x35>
    1106:	f8 01       	movw	r30, r16
    1108:	82 8d       	ldd	r24, Z+26	; 0x1a
    110a:	81 50       	subi	r24, 0x01	; 1
    110c:	82 8f       	std	Z+26, r24	; 0x1a
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	89 2b       	or	r24, r25
    1114:	21 f4       	brne	.+8      	; 0x111e <__stack+0x1f>
    1116:	3d d5       	rcall	.+2682   	; 0x1b92 <pvTaskIncrementMutexHeldCount>
    1118:	f8 01       	movw	r30, r16
    111a:	93 83       	std	Z+3, r25	; 0x03
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	f8 01       	movw	r30, r16
    1120:	80 85       	ldd	r24, Z+8	; 0x08
    1122:	88 23       	and	r24, r24
    1124:	91 f0       	breq	.+36     	; 0x114a <__stack+0x4b>
    1126:	c8 01       	movw	r24, r16
    1128:	08 96       	adiw	r24, 0x08	; 8
    112a:	0d d4       	rcall	.+2074   	; 0x1946 <xTaskRemoveFromEventList>
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	69 f4       	brne	.+26     	; 0x114a <__stack+0x4b>
    1130:	56 dd       	rcall	.-1364   	; 0xbde <vPortYield>
    1132:	0b c0       	rjmp	.+22     	; 0x114a <__stack+0x4b>
    1134:	f8 01       	movw	r30, r16
    1136:	f7 82       	std	Z+7, r15	; 0x07
    1138:	e6 82       	std	Z+6, r14	; 0x06
    113a:	81 89       	ldd	r24, Z+17	; 0x11
    113c:	88 23       	and	r24, r24
    113e:	29 f0       	breq	.+10     	; 0x114a <__stack+0x4b>
    1140:	c8 01       	movw	r24, r16
    1142:	41 96       	adiw	r24, 0x11	; 17
    1144:	00 d4       	rcall	.+2048   	; 0x1946 <xTaskRemoveFromEventList>
    1146:	81 11       	cpse	r24, r1
    1148:	4a dd       	rcall	.-1388   	; 0xbde <vPortYield>
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	50 c0       	rjmp	.+160    	; 0x11f2 <__stack+0xf3>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	89 2b       	or	r24, r25
    1158:	21 f4       	brne	.+8      	; 0x1162 <__stack+0x63>
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	48 c0       	rjmp	.+144    	; 0x11f2 <__stack+0xf3>
    1162:	b1 10       	cpse	r11, r1
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__stack+0x6f>
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	31 d4       	rcall	.+2146   	; 0x19ce <vTaskSetTimeOutState>
    116c:	ba 2c       	mov	r11, r10
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	d4 d1       	rcall	.+936    	; 0x151c <vTaskSuspendAll>
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	0f 92       	push	r0
    117a:	f8 01       	movw	r30, r16
    117c:	85 8d       	ldd	r24, Z+29	; 0x1d
    117e:	8f 3f       	cpi	r24, 0xFF	; 255
    1180:	09 f4       	brne	.+2      	; 0x1184 <__stack+0x85>
    1182:	15 8e       	std	Z+29, r1	; 0x1d
    1184:	f8 01       	movw	r30, r16
    1186:	86 8d       	ldd	r24, Z+30	; 0x1e
    1188:	8f 3f       	cpi	r24, 0xFF	; 255
    118a:	09 f4       	brne	.+2      	; 0x118e <__stack+0x8f>
    118c:	16 8e       	std	Z+30, r1	; 0x1e
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	be 01       	movw	r22, r28
    1194:	6c 5f       	subi	r22, 0xFC	; 252
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	23 d4       	rcall	.+2118   	; 0x19e4 <xTaskCheckForTimeOut>
    119e:	81 11       	cpse	r24, r1
    11a0:	24 c0       	rjmp	.+72     	; 0x11ea <__stack+0xeb>
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	0f 92       	push	r0
    11a8:	f8 01       	movw	r30, r16
    11aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	81 11       	cpse	r24, r1
    11b2:	17 c0       	rjmp	.+46     	; 0x11e2 <__stack+0xe3>
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	89 2b       	or	r24, r25
    11ba:	41 f4       	brne	.+16     	; 0x11cc <__stack+0xcd>
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	0f 92       	push	r0
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	43 d4       	rcall	.+2182   	; 0x1a4e <vTaskPriorityInherit>
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	6c 81       	ldd	r22, Y+4	; 0x04
    11ce:	7d 81       	ldd	r23, Y+5	; 0x05
    11d0:	c7 01       	movw	r24, r14
    11d2:	9f d3       	rcall	.+1854   	; 0x1912 <vTaskPlaceOnEventList>
    11d4:	c8 01       	movw	r24, r16
    11d6:	30 de       	rcall	.-928    	; 0xe38 <prvUnlockQueue>
    11d8:	60 d2       	rcall	.+1216   	; 0x169a <xTaskResumeAll>
    11da:	81 11       	cpse	r24, r1
    11dc:	86 cf       	rjmp	.-244    	; 0x10ea <xQueueGenericReceive+0x38>
    11de:	ff dc       	rcall	.-1538   	; 0xbde <vPortYield>
    11e0:	84 cf       	rjmp	.-248    	; 0x10ea <xQueueGenericReceive+0x38>
    11e2:	c8 01       	movw	r24, r16
    11e4:	29 de       	rcall	.-942    	; 0xe38 <prvUnlockQueue>
    11e6:	59 d2       	rcall	.+1202   	; 0x169a <xTaskResumeAll>
    11e8:	80 cf       	rjmp	.-256    	; 0x10ea <xQueueGenericReceive+0x38>
    11ea:	c8 01       	movw	r24, r16
    11ec:	25 de       	rcall	.-950    	; 0xe38 <prvUnlockQueue>
    11ee:	55 d2       	rcall	.+1194   	; 0x169a <xTaskResumeAll>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	08 95       	ret

00001214 <prvResetNextTaskUnblockTime>:
    1214:	e0 91 ff 09 	lds	r30, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    1218:	f0 91 00 0a 	lds	r31, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    121c:	80 81       	ld	r24, Z
    121e:	81 11       	cpse	r24, r1
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <prvResetNextTaskUnblockTime+0x1c>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <xNextTaskUnblockTime+0x1>
    122a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <xNextTaskUnblockTime>
    122e:	08 95       	ret
    1230:	e0 91 ff 09 	lds	r30, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    1234:	f0 91 00 0a 	lds	r31, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    1238:	05 80       	ldd	r0, Z+5	; 0x05
    123a:	f6 81       	ldd	r31, Z+6	; 0x06
    123c:	e0 2d       	mov	r30, r0
    123e:	06 80       	ldd	r0, Z+6	; 0x06
    1240:	f7 81       	ldd	r31, Z+7	; 0x07
    1242:	e0 2d       	mov	r30, r0
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <xNextTaskUnblockTime+0x1>
    124c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <xNextTaskUnblockTime>
    1250:	08 95       	ret

00001252 <prvAddCurrentTaskToDelayedList>:
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
    1258:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    125c:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1260:	93 83       	std	Z+3, r25	; 0x03
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <xTickCount>
    1268:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    126c:	c8 17       	cp	r28, r24
    126e:	d9 07       	cpc	r29, r25
    1270:	60 f4       	brcc	.+24     	; 0x128a <prvAddCurrentTaskToDelayedList+0x38>
    1272:	60 91 76 0a 	lds	r22, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1276:	70 91 77 0a 	lds	r23, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    127a:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <pxOverflowDelayedTaskList>
    127e:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <pxOverflowDelayedTaskList+0x1>
    1282:	6e 5f       	subi	r22, 0xFE	; 254
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	b3 db       	rcall	.-2202   	; 0x9ee <vListInsert>
    1288:	16 c0       	rjmp	.+44     	; 0x12b6 <prvAddCurrentTaskToDelayedList+0x64>
    128a:	60 91 76 0a 	lds	r22, 0x0A76	; 0x800a76 <pxCurrentTCB>
    128e:	70 91 77 0a 	lds	r23, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1292:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    1296:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    129a:	6e 5f       	subi	r22, 0xFE	; 254
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	a7 db       	rcall	.-2226   	; 0x9ee <vListInsert>
    12a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <xNextTaskUnblockTime>
    12a4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <xNextTaskUnblockTime+0x1>
    12a8:	c8 17       	cp	r28, r24
    12aa:	d9 07       	cpc	r29, r25
    12ac:	20 f4       	brcc	.+8      	; 0x12b6 <prvAddCurrentTaskToDelayedList+0x64>
    12ae:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <xNextTaskUnblockTime+0x1>
    12b2:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <xNextTaskUnblockTime>
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <xTaskGenericCreate>:
    12bc:	4f 92       	push	r4
    12be:	5f 92       	push	r5
    12c0:	6f 92       	push	r6
    12c2:	7f 92       	push	r7
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	4c 01       	movw	r8, r24
    12de:	eb 01       	movw	r28, r22
    12e0:	5a 01       	movw	r10, r20
    12e2:	29 01       	movw	r4, r18
    12e4:	8f e2       	ldi	r24, 0x2F	; 47
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	1b db       	rcall	.-2506   	; 0x920 <pvPortMalloc>
    12ea:	3c 01       	movw	r6, r24
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <xTaskGenericCreate+0x36>
    12f0:	da c0       	rjmp	.+436    	; 0x14a6 <xTaskGenericCreate+0x1ea>
    12f2:	c1 14       	cp	r12, r1
    12f4:	d1 04       	cpc	r13, r1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <xTaskGenericCreate+0x3e>
    12f8:	d2 c0       	rjmp	.+420    	; 0x149e <xTaskGenericCreate+0x1e2>
    12fa:	c5 01       	movw	r24, r10
    12fc:	11 db       	rcall	.-2526   	; 0x920 <pvPortMalloc>
    12fe:	f3 01       	movw	r30, r6
    1300:	90 8f       	std	Z+24, r25	; 0x18
    1302:	87 8b       	std	Z+23, r24	; 0x17
    1304:	89 2b       	or	r24, r25
    1306:	19 f4       	brne	.+6      	; 0x130e <xTaskGenericCreate+0x52>
    1308:	c3 01       	movw	r24, r6
    130a:	3d db       	rcall	.-2438   	; 0x986 <vPortFree>
    130c:	cc c0       	rjmp	.+408    	; 0x14a6 <xTaskGenericCreate+0x1ea>
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	af 1a       	sub	r10, r31
    1312:	b1 08       	sbc	r11, r1
    1314:	f3 01       	movw	r30, r6
    1316:	87 89       	ldd	r24, Z+23	; 0x17
    1318:	90 8d       	ldd	r25, Z+24	; 0x18
    131a:	a8 0e       	add	r10, r24
    131c:	b9 1e       	adc	r11, r25
    131e:	88 81       	ld	r24, Y
    1320:	81 8f       	std	Z+25, r24	; 0x19
    1322:	88 81       	ld	r24, Y
    1324:	88 23       	and	r24, r24
    1326:	81 f0       	breq	.+32     	; 0x1348 <xTaskGenericCreate+0x8c>
    1328:	d3 01       	movw	r26, r6
    132a:	5a 96       	adiw	r26, 0x1a	; 26
    132c:	fe 01       	movw	r30, r28
    132e:	31 96       	adiw	r30, 0x01	; 1
    1330:	9e 01       	movw	r18, r28
    1332:	2c 5e       	subi	r18, 0xEC	; 236
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	ef 01       	movw	r28, r30
    1338:	81 91       	ld	r24, Z+
    133a:	8d 93       	st	X+, r24
    133c:	88 81       	ld	r24, Y
    133e:	88 23       	and	r24, r24
    1340:	19 f0       	breq	.+6      	; 0x1348 <xTaskGenericCreate+0x8c>
    1342:	2e 17       	cp	r18, r30
    1344:	3f 07       	cpc	r19, r31
    1346:	b9 f7       	brne	.-18     	; 0x1336 <xTaskGenericCreate+0x7a>
    1348:	f3 01       	movw	r30, r6
    134a:	14 a6       	std	Z+44, r1	; 0x2c
    134c:	10 2f       	mov	r17, r16
    134e:	0b 30       	cpi	r16, 0x0B	; 11
    1350:	08 f0       	brcs	.+2      	; 0x1354 <xTaskGenericCreate+0x98>
    1352:	1a e0       	ldi	r17, 0x0A	; 10
    1354:	f3 01       	movw	r30, r6
    1356:	16 8b       	std	Z+22, r17	; 0x16
    1358:	15 a7       	std	Z+45, r17	; 0x2d
    135a:	16 a6       	std	Z+46, r1	; 0x2e
    135c:	e3 01       	movw	r28, r6
    135e:	22 96       	adiw	r28, 0x02	; 2
    1360:	ce 01       	movw	r24, r28
    1362:	20 db       	rcall	.-2496   	; 0x9a4 <vListInitialiseItem>
    1364:	c3 01       	movw	r24, r6
    1366:	0c 96       	adiw	r24, 0x0c	; 12
    1368:	1d db       	rcall	.-2502   	; 0x9a4 <vListInitialiseItem>
    136a:	f3 01       	movw	r30, r6
    136c:	71 86       	std	Z+9, r7	; 0x09
    136e:	60 86       	std	Z+8, r6	; 0x08
    1370:	8b e0       	ldi	r24, 0x0B	; 11
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	81 1b       	sub	r24, r17
    1376:	91 09       	sbc	r25, r1
    1378:	95 87       	std	Z+13, r25	; 0x0d
    137a:	84 87       	std	Z+12, r24	; 0x0c
    137c:	73 8a       	std	Z+19, r7	; 0x13
    137e:	62 8a       	std	Z+18, r6	; 0x12
    1380:	a2 01       	movw	r20, r4
    1382:	b4 01       	movw	r22, r8
    1384:	c5 01       	movw	r24, r10
    1386:	8a db       	rcall	.-2284   	; 0xa9c <pxPortInitialiseStack>
    1388:	f3 01       	movw	r30, r6
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	e1 14       	cp	r14, r1
    1390:	f1 04       	cpc	r15, r1
    1392:	19 f0       	breq	.+6      	; 0x139a <xTaskGenericCreate+0xde>
    1394:	f7 01       	movw	r30, r14
    1396:	71 82       	std	Z+1, r7	; 0x01
    1398:	60 82       	st	Z, r6
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	0f 92       	push	r0
    13a0:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <uxCurrentNumberOfTasks>
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <uxCurrentNumberOfTasks>
    13aa:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <pxCurrentTCB>
    13ae:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    13b2:	89 2b       	or	r24, r25
    13b4:	b1 f5       	brne	.+108    	; 0x1422 <xTaskGenericCreate+0x166>
    13b6:	70 92 77 0a 	sts	0x0A77, r7	; 0x800a77 <pxCurrentTCB+0x1>
    13ba:	60 92 76 0a 	sts	0x0A76, r6	; 0x800a76 <pxCurrentTCB>
    13be:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <uxCurrentNumberOfTasks>
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <xTaskGenericCreate+0x10c>
    13c6:	3c c0       	rjmp	.+120    	; 0x1440 <xTaskGenericCreate+0x184>
    13c8:	0f 2e       	mov	r0, r31
    13ca:	f3 e1       	ldi	r31, 0x13	; 19
    13cc:	ef 2e       	mov	r14, r31
    13ce:	fa e0       	ldi	r31, 0x0A	; 10
    13d0:	ff 2e       	mov	r15, r31
    13d2:	f0 2d       	mov	r31, r0
    13d4:	0f 2e       	mov	r0, r31
    13d6:	f6 e7       	ldi	r31, 0x76	; 118
    13d8:	cf 2e       	mov	r12, r31
    13da:	fa e0       	ldi	r31, 0x0A	; 10
    13dc:	df 2e       	mov	r13, r31
    13de:	f0 2d       	mov	r31, r0
    13e0:	c7 01       	movw	r24, r14
    13e2:	d2 da       	rcall	.-2652   	; 0x988 <vListInitialise>
    13e4:	f9 e0       	ldi	r31, 0x09	; 9
    13e6:	ef 0e       	add	r14, r31
    13e8:	f1 1c       	adc	r15, r1
    13ea:	ce 14       	cp	r12, r14
    13ec:	df 04       	cpc	r13, r15
    13ee:	c1 f7       	brne	.-16     	; 0x13e0 <xTaskGenericCreate+0x124>
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	9a e0       	ldi	r25, 0x0A	; 10
    13f4:	c9 da       	rcall	.-2670   	; 0x988 <vListInitialise>
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	9a e0       	ldi	r25, 0x0A	; 10
    13fa:	c6 da       	rcall	.-2676   	; 0x988 <vListInitialise>
    13fc:	84 ef       	ldi	r24, 0xF4	; 244
    13fe:	99 e0       	ldi	r25, 0x09	; 9
    1400:	c3 da       	rcall	.-2682   	; 0x988 <vListInitialise>
    1402:	8b ee       	ldi	r24, 0xEB	; 235
    1404:	99 e0       	ldi	r25, 0x09	; 9
    1406:	c0 da       	rcall	.-2688   	; 0x988 <vListInitialise>
    1408:	8a e0       	ldi	r24, 0x0A	; 10
    140a:	9a e0       	ldi	r25, 0x0A	; 10
    140c:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <pxDelayedTaskList+0x1>
    1410:	80 93 ff 09 	sts	0x09FF, r24	; 0x8009ff <pxDelayedTaskList>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	9a e0       	ldi	r25, 0x0A	; 10
    1418:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <pxOverflowDelayedTaskList+0x1>
    141c:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <pxOverflowDelayedTaskList>
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <xTaskGenericCreate+0x184>
    1422:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <xSchedulerRunning>
    1426:	81 11       	cpse	r24, r1
    1428:	0b c0       	rjmp	.+22     	; 0x1440 <xTaskGenericCreate+0x184>
    142a:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    142e:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1432:	86 89       	ldd	r24, Z+22	; 0x16
    1434:	08 17       	cp	r16, r24
    1436:	20 f0       	brcs	.+8      	; 0x1440 <xTaskGenericCreate+0x184>
    1438:	70 92 77 0a 	sts	0x0A77, r7	; 0x800a77 <pxCurrentTCB+0x1>
    143c:	60 92 76 0a 	sts	0x0A76, r6	; 0x800a76 <pxCurrentTCB>
    1440:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <uxTaskNumber>
    1444:	8f 5f       	subi	r24, 0xFF	; 255
    1446:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <uxTaskNumber>
    144a:	f3 01       	movw	r30, r6
    144c:	86 89       	ldd	r24, Z+22	; 0x16
    144e:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1452:	98 17       	cp	r25, r24
    1454:	10 f4       	brcc	.+4      	; 0x145a <xTaskGenericCreate+0x19e>
    1456:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 01       	movw	r18, r24
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	22 0f       	add	r18, r18
    1464:	33 1f       	adc	r19, r19
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	82 0f       	add	r24, r18
    146c:	93 1f       	adc	r25, r19
    146e:	be 01       	movw	r22, r28
    1470:	8d 5e       	subi	r24, 0xED	; 237
    1472:	95 4f       	sbci	r25, 0xF5	; 245
    1474:	9b da       	rcall	.-2762   	; 0x9ac <vListInsertEnd>
    1476:	0f 90       	pop	r0
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <xSchedulerRunning>
    147e:	88 23       	and	r24, r24
    1480:	51 f0       	breq	.+20     	; 0x1496 <xTaskGenericCreate+0x1da>
    1482:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1486:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    148a:	86 89       	ldd	r24, Z+22	; 0x16
    148c:	80 17       	cp	r24, r16
    148e:	28 f4       	brcc	.+10     	; 0x149a <xTaskGenericCreate+0x1de>
    1490:	a6 db       	rcall	.-2228   	; 0xbde <vPortYield>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <xTaskGenericCreate+0x1ec>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	07 c0       	rjmp	.+14     	; 0x14a8 <xTaskGenericCreate+0x1ec>
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <xTaskGenericCreate+0x1ec>
    149e:	fc 01       	movw	r30, r24
    14a0:	d0 8e       	std	Z+24, r13	; 0x18
    14a2:	c7 8a       	std	Z+23, r12	; 0x17
    14a4:	34 cf       	rjmp	.-408    	; 0x130e <xTaskGenericCreate+0x52>
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	bf 90       	pop	r11
    14ba:	af 90       	pop	r10
    14bc:	9f 90       	pop	r9
    14be:	8f 90       	pop	r8
    14c0:	7f 90       	pop	r7
    14c2:	6f 90       	pop	r6
    14c4:	5f 90       	pop	r5
    14c6:	4f 90       	pop	r4
    14c8:	08 95       	ret

000014ca <vTaskStartScheduler>:
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	a1 2c       	mov	r10, r1
    14da:	b1 2c       	mov	r11, r1
    14dc:	c1 2c       	mov	r12, r1
    14de:	d1 2c       	mov	r13, r1
    14e0:	e1 2c       	mov	r14, r1
    14e2:	f1 2c       	mov	r15, r1
    14e4:	00 e0       	ldi	r16, 0x00	; 0
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	45 e5       	ldi	r20, 0x55	; 85
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	6b e1       	ldi	r22, 0x1B	; 27
    14f0:	71 e0       	ldi	r23, 0x01	; 1
    14f2:	85 ee       	ldi	r24, 0xE5	; 229
    14f4:	9b e0       	ldi	r25, 0x0B	; 11
    14f6:	e2 de       	rcall	.-572    	; 0x12bc <xTaskGenericCreate>
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	41 f4       	brne	.+16     	; 0x150c <vTaskStartScheduler+0x42>
    14fc:	f8 94       	cli
    14fe:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <xSchedulerRunning>
    1502:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <xTickCount+0x1>
    1506:	10 92 e7 09 	sts	0x09E7, r1	; 0x8009e7 <xTickCount>
    150a:	34 db       	rcall	.-2456   	; 0xb74 <xPortStartScheduler>
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	bf 90       	pop	r11
    1518:	af 90       	pop	r10
    151a:	08 95       	ret

0000151c <vTaskSuspendAll>:
    151c:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <uxSchedulerSuspended>
    1526:	08 95       	ret

00001528 <xTaskIncrementTick>:
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    153c:	81 11       	cpse	r24, r1
    153e:	97 c0       	rjmp	.+302    	; 0x166e <xTaskIncrementTick+0x146>
    1540:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <xTickCount>
    1544:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <xTickCount+0x1>
    154e:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <xTickCount>
    1552:	e0 90 e7 09 	lds	r14, 0x09E7	; 0x8009e7 <xTickCount>
    1556:	f0 90 e8 09 	lds	r15, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    155a:	e1 14       	cp	r14, r1
    155c:	f1 04       	cpc	r15, r1
    155e:	b1 f4       	brne	.+44     	; 0x158c <xTaskIncrementTick+0x64>
    1560:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    1564:	90 91 00 0a 	lds	r25, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    1568:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <pxOverflowDelayedTaskList>
    156c:	30 91 fe 09 	lds	r19, 0x09FE	; 0x8009fe <pxOverflowDelayedTaskList+0x1>
    1570:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <pxDelayedTaskList+0x1>
    1574:	20 93 ff 09 	sts	0x09FF, r18	; 0x8009ff <pxDelayedTaskList>
    1578:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <pxOverflowDelayedTaskList+0x1>
    157c:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <pxOverflowDelayedTaskList>
    1580:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <xNumOfOverflows>
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <xNumOfOverflows>
    158a:	44 de       	rcall	.-888    	; 0x1214 <prvResetNextTaskUnblockTime>
    158c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <xNextTaskUnblockTime>
    1590:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <xNextTaskUnblockTime+0x1>
    1594:	e8 16       	cp	r14, r24
    1596:	f9 06       	cpc	r15, r25
    1598:	10 f4       	brcc	.+4      	; 0x159e <xTaskIncrementTick+0x76>
    159a:	d1 2c       	mov	r13, r1
    159c:	50 c0       	rjmp	.+160    	; 0x163e <xTaskIncrementTick+0x116>
    159e:	d1 2c       	mov	r13, r1
    15a0:	cc 24       	eor	r12, r12
    15a2:	c3 94       	inc	r12
    15a4:	e0 91 ff 09 	lds	r30, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    15a8:	f0 91 00 0a 	lds	r31, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    15ac:	80 81       	ld	r24, Z
    15ae:	81 11       	cpse	r24, r1
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <xTaskIncrementTick+0x98>
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <xNextTaskUnblockTime+0x1>
    15ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <xNextTaskUnblockTime>
    15be:	3f c0       	rjmp	.+126    	; 0x163e <xTaskIncrementTick+0x116>
    15c0:	e0 91 ff 09 	lds	r30, 0x09FF	; 0x8009ff <pxDelayedTaskList>
    15c4:	f0 91 00 0a 	lds	r31, 0x0A00	; 0x800a00 <pxDelayedTaskList+0x1>
    15c8:	05 80       	ldd	r0, Z+5	; 0x05
    15ca:	f6 81       	ldd	r31, Z+6	; 0x06
    15cc:	e0 2d       	mov	r30, r0
    15ce:	c6 81       	ldd	r28, Z+6	; 0x06
    15d0:	d7 81       	ldd	r29, Z+7	; 0x07
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9b 81       	ldd	r25, Y+3	; 0x03
    15d6:	e8 16       	cp	r14, r24
    15d8:	f9 06       	cpc	r15, r25
    15da:	28 f4       	brcc	.+10     	; 0x15e6 <xTaskIncrementTick+0xbe>
    15dc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <xNextTaskUnblockTime+0x1>
    15e0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <xNextTaskUnblockTime>
    15e4:	2c c0       	rjmp	.+88     	; 0x163e <xTaskIncrementTick+0x116>
    15e6:	8e 01       	movw	r16, r28
    15e8:	0e 5f       	subi	r16, 0xFE	; 254
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	c8 01       	movw	r24, r16
    15ee:	30 da       	rcall	.-2976   	; 0xa50 <uxListRemove>
    15f0:	8c 89       	ldd	r24, Y+20	; 0x14
    15f2:	9d 89       	ldd	r25, Y+21	; 0x15
    15f4:	89 2b       	or	r24, r25
    15f6:	19 f0       	breq	.+6      	; 0x15fe <xTaskIncrementTick+0xd6>
    15f8:	ce 01       	movw	r24, r28
    15fa:	0c 96       	adiw	r24, 0x0c	; 12
    15fc:	29 da       	rcall	.-2990   	; 0xa50 <uxListRemove>
    15fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1600:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1604:	98 17       	cp	r25, r24
    1606:	10 f4       	brcc	.+4      	; 0x160c <xTaskIncrementTick+0xe4>
    1608:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 01       	movw	r18, r24
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	b8 01       	movw	r22, r16
    1622:	8d 5e       	subi	r24, 0xED	; 237
    1624:	95 4f       	sbci	r25, 0xF5	; 245
    1626:	c2 d9       	rcall	.-3196   	; 0x9ac <vListInsertEnd>
    1628:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    162c:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1630:	9e 89       	ldd	r25, Y+22	; 0x16
    1632:	86 89       	ldd	r24, Z+22	; 0x16
    1634:	98 17       	cp	r25, r24
    1636:	08 f4       	brcc	.+2      	; 0x163a <xTaskIncrementTick+0x112>
    1638:	b5 cf       	rjmp	.-150    	; 0x15a4 <xTaskIncrementTick+0x7c>
    163a:	dc 2c       	mov	r13, r12
    163c:	b3 cf       	rjmp	.-154    	; 0x15a4 <xTaskIncrementTick+0x7c>
    163e:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1642:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1646:	86 89       	ldd	r24, Z+22	; 0x16
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	fc 01       	movw	r30, r24
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	8e 0f       	add	r24, r30
    165a:	9f 1f       	adc	r25, r31
    165c:	fc 01       	movw	r30, r24
    165e:	ed 5e       	subi	r30, 0xED	; 237
    1660:	f5 4f       	sbci	r31, 0xF5	; 245
    1662:	80 81       	ld	r24, Z
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	48 f0       	brcs	.+18     	; 0x167a <xTaskIncrementTick+0x152>
    1668:	dd 24       	eor	r13, r13
    166a:	d3 94       	inc	r13
    166c:	06 c0       	rjmp	.+12     	; 0x167a <xTaskIncrementTick+0x152>
    166e:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <uxPendedTicks>
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <uxPendedTicks>
    1678:	d1 2c       	mov	r13, r1
    167a:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <xYieldPending>
    167e:	88 23       	and	r24, r24
    1680:	11 f0       	breq	.+4      	; 0x1686 <xTaskIncrementTick+0x15e>
    1682:	dd 24       	eor	r13, r13
    1684:	d3 94       	inc	r13
    1686:	8d 2d       	mov	r24, r13
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	08 95       	ret

0000169a <xTaskResumeAll>:
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	0f 92       	push	r0
    16ae:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <uxSchedulerSuspended>
    16b8:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    16bc:	81 11       	cpse	r24, r1
    16be:	5d c0       	rjmp	.+186    	; 0x177a <xTaskResumeAll+0xe0>
    16c0:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <uxCurrentNumberOfTasks>
    16c4:	81 11       	cpse	r24, r1
    16c6:	30 c0       	rjmp	.+96     	; 0x1728 <xTaskResumeAll+0x8e>
    16c8:	5b c0       	rjmp	.+182    	; 0x1780 <xTaskResumeAll+0xe6>
    16ca:	d7 01       	movw	r26, r14
    16cc:	15 96       	adiw	r26, 0x05	; 5
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	16 97       	sbiw	r26, 0x06	; 6
    16d4:	c6 81       	ldd	r28, Z+6	; 0x06
    16d6:	d7 81       	ldd	r29, Z+7	; 0x07
    16d8:	ce 01       	movw	r24, r28
    16da:	0c 96       	adiw	r24, 0x0c	; 12
    16dc:	b9 d9       	rcall	.-3214   	; 0xa50 <uxListRemove>
    16de:	8e 01       	movw	r16, r28
    16e0:	0e 5f       	subi	r16, 0xFE	; 254
    16e2:	1f 4f       	sbci	r17, 0xFF	; 255
    16e4:	c8 01       	movw	r24, r16
    16e6:	b4 d9       	rcall	.-3224   	; 0xa50 <uxListRemove>
    16e8:	8e 89       	ldd	r24, Y+22	; 0x16
    16ea:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    16ee:	98 17       	cp	r25, r24
    16f0:	10 f4       	brcc	.+4      	; 0x16f6 <xTaskResumeAll+0x5c>
    16f2:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	82 0f       	add	r24, r18
    1708:	93 1f       	adc	r25, r19
    170a:	b8 01       	movw	r22, r16
    170c:	8d 5e       	subi	r24, 0xED	; 237
    170e:	95 4f       	sbci	r25, 0xF5	; 245
    1710:	4d d9       	rcall	.-3430   	; 0x9ac <vListInsertEnd>
    1712:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1716:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    171a:	9e 89       	ldd	r25, Y+22	; 0x16
    171c:	86 89       	ldd	r24, Z+22	; 0x16
    171e:	98 17       	cp	r25, r24
    1720:	58 f0       	brcs	.+22     	; 0x1738 <xTaskResumeAll+0x9e>
    1722:	d0 92 e3 09 	sts	0x09E3, r13	; 0x8009e3 <xYieldPending>
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <xTaskResumeAll+0x9e>
    1728:	0f 2e       	mov	r0, r31
    172a:	f4 ef       	ldi	r31, 0xF4	; 244
    172c:	ef 2e       	mov	r14, r31
    172e:	f9 e0       	ldi	r31, 0x09	; 9
    1730:	ff 2e       	mov	r15, r31
    1732:	f0 2d       	mov	r31, r0
    1734:	dd 24       	eor	r13, r13
    1736:	d3 94       	inc	r13
    1738:	f7 01       	movw	r30, r14
    173a:	80 81       	ld	r24, Z
    173c:	81 11       	cpse	r24, r1
    173e:	c5 cf       	rjmp	.-118    	; 0x16ca <xTaskResumeAll+0x30>
    1740:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <uxPendedTicks>
    1744:	88 23       	and	r24, r24
    1746:	91 f0       	breq	.+36     	; 0x176c <xTaskResumeAll+0xd2>
    1748:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <uxPendedTicks>
    174c:	88 23       	and	r24, r24
    174e:	71 f0       	breq	.+28     	; 0x176c <xTaskResumeAll+0xd2>
    1750:	c1 e0       	ldi	r28, 0x01	; 1
    1752:	ea de       	rcall	.-556    	; 0x1528 <xTaskIncrementTick>
    1754:	81 11       	cpse	r24, r1
    1756:	c0 93 e3 09 	sts	0x09E3, r28	; 0x8009e3 <xYieldPending>
    175a:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <uxPendedTicks>
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <uxPendedTicks>
    1764:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <uxPendedTicks>
    1768:	81 11       	cpse	r24, r1
    176a:	f3 cf       	rjmp	.-26     	; 0x1752 <xTaskResumeAll+0xb8>
    176c:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <xYieldPending>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	29 f4       	brne	.+10     	; 0x177e <xTaskResumeAll+0xe4>
    1774:	34 da       	rcall	.-2968   	; 0xbde <vPortYield>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <xTaskResumeAll+0xe6>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <xTaskResumeAll+0xe6>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	08 95       	ret

00001794 <vTaskDelay>:
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	89 2b       	or	r24, r25
    179c:	91 f0       	breq	.+36     	; 0x17c2 <vTaskDelay+0x2e>
    179e:	be de       	rcall	.-644    	; 0x151c <vTaskSuspendAll>
    17a0:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <xTickCount>
    17a4:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    17a8:	c8 0f       	add	r28, r24
    17aa:	d9 1f       	adc	r29, r25
    17ac:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <pxCurrentTCB>
    17b0:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    17b4:	02 96       	adiw	r24, 0x02	; 2
    17b6:	4c d9       	rcall	.-3432   	; 0xa50 <uxListRemove>
    17b8:	ce 01       	movw	r24, r28
    17ba:	4b dd       	rcall	.-1386   	; 0x1252 <prvAddCurrentTaskToDelayedList>
    17bc:	6e df       	rcall	.-292    	; 0x169a <xTaskResumeAll>
    17be:	81 11       	cpse	r24, r1
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vTaskDelay+0x30>
    17c2:	0d da       	rcall	.-3046   	; 0xbde <vPortYield>
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <prvIdleTask>:
    17ca:	0b ee       	ldi	r16, 0xEB	; 235
    17cc:	19 e0       	ldi	r17, 0x09	; 9
    17ce:	0f 2e       	mov	r0, r31
    17d0:	f3 e1       	ldi	r31, 0x13	; 19
    17d2:	ef 2e       	mov	r14, r31
    17d4:	fa e0       	ldi	r31, 0x0A	; 10
    17d6:	ff 2e       	mov	r15, r31
    17d8:	f0 2d       	mov	r31, r0
    17da:	24 c0       	rjmp	.+72     	; 0x1824 <prvIdleTask+0x5a>
    17dc:	9f de       	rcall	.-706    	; 0x151c <vTaskSuspendAll>
    17de:	d8 01       	movw	r26, r16
    17e0:	cc 91       	ld	r28, X
    17e2:	5b df       	rcall	.-330    	; 0x169a <xTaskResumeAll>
    17e4:	cc 23       	and	r28, r28
    17e6:	f1 f0       	breq	.+60     	; 0x1824 <prvIdleTask+0x5a>
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	0f 92       	push	r0
    17ee:	d8 01       	movw	r26, r16
    17f0:	15 96       	adiw	r26, 0x05	; 5
    17f2:	ed 91       	ld	r30, X+
    17f4:	fc 91       	ld	r31, X
    17f6:	16 97       	sbiw	r26, 0x06	; 6
    17f8:	c6 81       	ldd	r28, Z+6	; 0x06
    17fa:	d7 81       	ldd	r29, Z+7	; 0x07
    17fc:	ce 01       	movw	r24, r28
    17fe:	02 96       	adiw	r24, 0x02	; 2
    1800:	27 d9       	rcall	.-3506   	; 0xa50 <uxListRemove>
    1802:	80 91 e9 09 	lds	r24, 0x09E9	; 0x8009e9 <uxCurrentNumberOfTasks>
    1806:	81 50       	subi	r24, 0x01	; 1
    1808:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <uxCurrentNumberOfTasks>
    180c:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <uxTasksDeleted>
    1810:	81 50       	subi	r24, 0x01	; 1
    1812:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <uxTasksDeleted>
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	b3 d8       	rcall	.-3738   	; 0x986 <vPortFree>
    1820:	ce 01       	movw	r24, r28
    1822:	b1 d8       	rcall	.-3742   	; 0x986 <vPortFree>
    1824:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <uxTasksDeleted>
    1828:	81 11       	cpse	r24, r1
    182a:	d8 cf       	rjmp	.-80     	; 0x17dc <prvIdleTask+0x12>
    182c:	f7 01       	movw	r30, r14
    182e:	80 81       	ld	r24, Z
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	c0 f3       	brcs	.-16     	; 0x1824 <prvIdleTask+0x5a>
    1834:	d4 d9       	rcall	.-3160   	; 0xbde <vPortYield>
    1836:	f6 cf       	rjmp	.-20     	; 0x1824 <prvIdleTask+0x5a>

00001838 <vTaskSwitchContext>:
    1838:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    183c:	88 23       	and	r24, r24
    183e:	21 f0       	breq	.+8      	; 0x1848 <vTaskSwitchContext+0x10>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <xYieldPending>
    1846:	08 95       	ret
    1848:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <xYieldPending>
    184c:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	8e 0f       	add	r24, r30
    1862:	9f 1f       	adc	r25, r31
    1864:	fc 01       	movw	r30, r24
    1866:	ed 5e       	subi	r30, 0xED	; 237
    1868:	f5 4f       	sbci	r31, 0xF5	; 245
    186a:	80 81       	ld	r24, Z
    186c:	81 11       	cpse	r24, r1
    186e:	17 c0       	rjmp	.+46     	; 0x189e <vTaskSwitchContext+0x66>
    1870:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1874:	81 50       	subi	r24, 0x01	; 1
    1876:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    187a:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	fc 01       	movw	r30, r24
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	8e 0f       	add	r24, r30
    1890:	9f 1f       	adc	r25, r31
    1892:	fc 01       	movw	r30, r24
    1894:	ed 5e       	subi	r30, 0xED	; 237
    1896:	f5 4f       	sbci	r31, 0xF5	; 245
    1898:	80 81       	ld	r24, Z
    189a:	88 23       	and	r24, r24
    189c:	49 f3       	breq	.-46     	; 0x1870 <vTaskSwitchContext+0x38>
    189e:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c 01       	movw	r18, r24
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	28 0f       	add	r18, r24
    18b4:	39 1f       	adc	r19, r25
    18b6:	d9 01       	movw	r26, r18
    18b8:	ad 5e       	subi	r26, 0xED	; 237
    18ba:	b5 4f       	sbci	r27, 0xF5	; 245
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	12 97       	sbiw	r26, 0x02	; 2
    18c4:	02 80       	ldd	r0, Z+2	; 0x02
    18c6:	f3 81       	ldd	r31, Z+3	; 0x03
    18c8:	e0 2d       	mov	r30, r0
    18ca:	12 96       	adiw	r26, 0x02	; 2
    18cc:	fc 93       	st	X, r31
    18ce:	ee 93       	st	-X, r30
    18d0:	11 97       	sbiw	r26, 0x01	; 1
    18d2:	2a 5e       	subi	r18, 0xEA	; 234
    18d4:	35 4f       	sbci	r19, 0xF5	; 245
    18d6:	e2 17       	cp	r30, r18
    18d8:	f3 07       	cpc	r31, r19
    18da:	29 f4       	brne	.+10     	; 0x18e6 <vTaskSwitchContext+0xae>
    18dc:	22 81       	ldd	r18, Z+2	; 0x02
    18de:	33 81       	ldd	r19, Z+3	; 0x03
    18e0:	fd 01       	movw	r30, r26
    18e2:	32 83       	std	Z+2, r19	; 0x02
    18e4:	21 83       	std	Z+1, r18	; 0x01
    18e6:	fc 01       	movw	r30, r24
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	8e 0f       	add	r24, r30
    18f6:	9f 1f       	adc	r25, r31
    18f8:	fc 01       	movw	r30, r24
    18fa:	ed 5e       	subi	r30, 0xED	; 237
    18fc:	f5 4f       	sbci	r31, 0xF5	; 245
    18fe:	01 80       	ldd	r0, Z+1	; 0x01
    1900:	f2 81       	ldd	r31, Z+2	; 0x02
    1902:	e0 2d       	mov	r30, r0
    1904:	86 81       	ldd	r24, Z+6	; 0x06
    1906:	97 81       	ldd	r25, Z+7	; 0x07
    1908:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <pxCurrentTCB+0x1>
    190c:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <pxCurrentTCB>
    1910:	08 95       	ret

00001912 <vTaskPlaceOnEventList>:
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	eb 01       	movw	r28, r22
    1918:	60 91 76 0a 	lds	r22, 0x0A76	; 0x800a76 <pxCurrentTCB>
    191c:	70 91 77 0a 	lds	r23, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1920:	64 5f       	subi	r22, 0xF4	; 244
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	64 d8       	rcall	.-3896   	; 0x9ee <vListInsert>
    1926:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <pxCurrentTCB>
    192a:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    192e:	02 96       	adiw	r24, 0x02	; 2
    1930:	8f d8       	rcall	.-3810   	; 0xa50 <uxListRemove>
    1932:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <xTickCount>
    1936:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    193a:	8c 0f       	add	r24, r28
    193c:	9d 1f       	adc	r25, r29
    193e:	89 dc       	rcall	.-1774   	; 0x1252 <prvAddCurrentTaskToDelayedList>
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <xTaskRemoveFromEventList>:
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	dc 01       	movw	r26, r24
    1950:	15 96       	adiw	r26, 0x05	; 5
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	16 97       	sbiw	r26, 0x06	; 6
    1958:	c6 81       	ldd	r28, Z+6	; 0x06
    195a:	d7 81       	ldd	r29, Z+7	; 0x07
    195c:	8e 01       	movw	r16, r28
    195e:	04 5f       	subi	r16, 0xF4	; 244
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	c8 01       	movw	r24, r16
    1964:	75 d8       	rcall	.-3862   	; 0xa50 <uxListRemove>
    1966:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <uxSchedulerSuspended>
    196a:	81 11       	cpse	r24, r1
    196c:	1a c0       	rjmp	.+52     	; 0x19a2 <xTaskRemoveFromEventList+0x5c>
    196e:	0a 50       	subi	r16, 0x0A	; 10
    1970:	11 09       	sbc	r17, r1
    1972:	c8 01       	movw	r24, r16
    1974:	6d d8       	rcall	.-3878   	; 0xa50 <uxListRemove>
    1976:	8e 89       	ldd	r24, Y+22	; 0x16
    1978:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    197c:	98 17       	cp	r25, r24
    197e:	10 f4       	brcc	.+4      	; 0x1984 <xTaskRemoveFromEventList+0x3e>
    1980:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c 01       	movw	r18, r24
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	82 0f       	add	r24, r18
    1996:	93 1f       	adc	r25, r19
    1998:	b8 01       	movw	r22, r16
    199a:	8d 5e       	subi	r24, 0xED	; 237
    199c:	95 4f       	sbci	r25, 0xF5	; 245
    199e:	06 d8       	rcall	.-4084   	; 0x9ac <vListInsertEnd>
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <xTaskRemoveFromEventList+0x64>
    19a2:	b8 01       	movw	r22, r16
    19a4:	84 ef       	ldi	r24, 0xF4	; 244
    19a6:	99 e0       	ldi	r25, 0x09	; 9
    19a8:	01 d8       	rcall	.-4094   	; 0x9ac <vListInsertEnd>
    19aa:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    19ae:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    19b2:	9e 89       	ldd	r25, Y+22	; 0x16
    19b4:	86 89       	ldd	r24, Z+22	; 0x16
    19b6:	89 17       	cp	r24, r25
    19b8:	20 f4       	brcc	.+8      	; 0x19c2 <xTaskRemoveFromEventList+0x7c>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <xYieldPending>
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <xTaskRemoveFromEventList+0x7e>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <vTaskSetTimeOutState>:
    19ce:	20 91 e2 09 	lds	r18, 0x09E2	; 0x8009e2 <xNumOfOverflows>
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	20 91 e7 09 	lds	r18, 0x09E7	; 0x8009e7 <xTickCount>
    19da:	30 91 e8 09 	lds	r19, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    19de:	32 83       	std	Z+2, r19	; 0x02
    19e0:	21 83       	std	Z+1, r18	; 0x01
    19e2:	08 95       	ret

000019e4 <xTaskCheckForTimeOut>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	fc 01       	movw	r30, r24
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	0f 92       	push	r0
    19f0:	20 91 e7 09 	lds	r18, 0x09E7	; 0x8009e7 <xTickCount>
    19f4:	30 91 e8 09 	lds	r19, 0x09E8	; 0x8009e8 <xTickCount+0x1>
    19f8:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <xNumOfOverflows>
    19fc:	90 81       	ld	r25, Z
    19fe:	98 17       	cp	r25, r24
    1a00:	29 f0       	breq	.+10     	; 0x1a0c <xTaskCheckForTimeOut+0x28>
    1a02:	81 81       	ldd	r24, Z+1	; 0x01
    1a04:	92 81       	ldd	r25, Z+2	; 0x02
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	a8 f4       	brcc	.+42     	; 0x1a36 <xTaskCheckForTimeOut+0x52>
    1a0c:	a1 81       	ldd	r26, Z+1	; 0x01
    1a0e:	b2 81       	ldd	r27, Z+2	; 0x02
    1a10:	eb 01       	movw	r28, r22
    1a12:	48 81       	ld	r20, Y
    1a14:	59 81       	ldd	r21, Y+1	; 0x01
    1a16:	c9 01       	movw	r24, r18
    1a18:	8a 1b       	sub	r24, r26
    1a1a:	9b 0b       	sbc	r25, r27
    1a1c:	84 17       	cp	r24, r20
    1a1e:	95 07       	cpc	r25, r21
    1a20:	60 f4       	brcc	.+24     	; 0x1a3a <xTaskCheckForTimeOut+0x56>
    1a22:	cf 01       	movw	r24, r30
    1a24:	a2 1b       	sub	r26, r18
    1a26:	b3 0b       	sbc	r27, r19
    1a28:	4a 0f       	add	r20, r26
    1a2a:	5b 1f       	adc	r21, r27
    1a2c:	59 83       	std	Y+1, r21	; 0x01
    1a2e:	48 83       	st	Y, r20
    1a30:	ce df       	rcall	.-100    	; 0x19ce <vTaskSetTimeOutState>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <xTaskCheckForTimeOut+0x58>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <xTaskCheckForTimeOut+0x58>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <vTaskMissedYield>:
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <xYieldPending>
    1a4c:	08 95       	ret

00001a4e <vTaskPriorityInherit>:
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	fc 01       	movw	r30, r24
    1a58:	89 2b       	or	r24, r25
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <vTaskPriorityInherit+0x10>
    1a5c:	55 c0       	rjmp	.+170    	; 0x1b08 <vTaskPriorityInherit+0xba>
    1a5e:	26 89       	ldd	r18, Z+22	; 0x16
    1a60:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1a64:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1a68:	56 96       	adiw	r26, 0x16	; 22
    1a6a:	8c 91       	ld	r24, X
    1a6c:	28 17       	cp	r18, r24
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <vTaskPriorityInherit+0x24>
    1a70:	4b c0       	rjmp	.+150    	; 0x1b08 <vTaskPriorityInherit+0xba>
    1a72:	84 85       	ldd	r24, Z+12	; 0x0c
    1a74:	95 85       	ldd	r25, Z+13	; 0x0d
    1a76:	99 23       	and	r25, r25
    1a78:	64 f0       	brlt	.+24     	; 0x1a92 <vTaskPriorityInherit+0x44>
    1a7a:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1a7e:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1a82:	56 96       	adiw	r26, 0x16	; 22
    1a84:	3c 91       	ld	r19, X
    1a86:	8b e0       	ldi	r24, 0x0B	; 11
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	83 1b       	sub	r24, r19
    1a8c:	91 09       	sbc	r25, r1
    1a8e:	95 87       	std	Z+13, r25	; 0x0d
    1a90:	84 87       	std	Z+12, r24	; 0x0c
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	c9 01       	movw	r24, r18
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	28 0f       	add	r18, r24
    1aa4:	39 1f       	adc	r19, r25
    1aa6:	2d 5e       	subi	r18, 0xED	; 237
    1aa8:	35 4f       	sbci	r19, 0xF5	; 245
    1aaa:	82 85       	ldd	r24, Z+10	; 0x0a
    1aac:	93 85       	ldd	r25, Z+11	; 0x0b
    1aae:	82 17       	cp	r24, r18
    1ab0:	93 07       	cpc	r25, r19
    1ab2:	19 f5       	brne	.+70     	; 0x1afa <vTaskPriorityInherit+0xac>
    1ab4:	8f 01       	movw	r16, r30
    1ab6:	ef 01       	movw	r28, r30
    1ab8:	22 96       	adiw	r28, 0x02	; 2
    1aba:	ce 01       	movw	r24, r28
    1abc:	0e 94 28 05 	call	0xa50	; 0xa50 <uxListRemove>
    1ac0:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1ac4:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1ac8:	86 89       	ldd	r24, Z+22	; 0x16
    1aca:	f8 01       	movw	r30, r16
    1acc:	86 8b       	std	Z+22, r24	; 0x16
    1ace:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1ad2:	98 17       	cp	r25, r24
    1ad4:	10 f4       	brcc	.+4      	; 0x1ada <vTaskPriorityInherit+0x8c>
    1ad6:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9c 01       	movw	r18, r24
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	82 0f       	add	r24, r18
    1aec:	93 1f       	adc	r25, r19
    1aee:	be 01       	movw	r22, r28
    1af0:	8d 5e       	subi	r24, 0xED	; 237
    1af2:	95 4f       	sbci	r25, 0xF5	; 245
    1af4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsertEnd>
    1af8:	07 c0       	rjmp	.+14     	; 0x1b08 <vTaskPriorityInherit+0xba>
    1afa:	a0 91 76 0a 	lds	r26, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1afe:	b0 91 77 0a 	lds	r27, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1b02:	56 96       	adiw	r26, 0x16	; 22
    1b04:	8c 91       	ld	r24, X
    1b06:	86 8b       	std	Z+22, r24	; 0x16
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <xTaskPriorityDisinherit>:
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	89 2b       	or	r24, r25
    1b1e:	79 f1       	breq	.+94     	; 0x1b7e <xTaskPriorityDisinherit+0x6c>
    1b20:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b22:	81 50       	subi	r24, 0x01	; 1
    1b24:	86 a7       	std	Z+46, r24	; 0x2e
    1b26:	26 89       	ldd	r18, Z+22	; 0x16
    1b28:	95 a5       	ldd	r25, Z+45	; 0x2d
    1b2a:	29 17       	cp	r18, r25
    1b2c:	51 f1       	breq	.+84     	; 0x1b82 <xTaskPriorityDisinherit+0x70>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	2a c0       	rjmp	.+84     	; 0x1b86 <xTaskPriorityDisinherit+0x74>
    1b32:	ef 01       	movw	r28, r30
    1b34:	8f 01       	movw	r16, r30
    1b36:	0e 5f       	subi	r16, 0xFE	; 254
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	0e 94 28 05 	call	0xa50	; 0xa50 <uxListRemove>
    1b40:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b42:	8e 8b       	std	Y+22, r24	; 0x16
    1b44:	2b e0       	ldi	r18, 0x0B	; 11
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	28 1b       	sub	r18, r24
    1b4a:	31 09       	sbc	r19, r1
    1b4c:	3d 87       	std	Y+13, r19	; 0x0d
    1b4e:	2c 87       	std	Y+12, r18	; 0x0c
    1b50:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <uxTopReadyPriority>
    1b54:	98 17       	cp	r25, r24
    1b56:	10 f4       	brcc	.+4      	; 0x1b5c <xTaskPriorityDisinherit+0x4a>
    1b58:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <uxTopReadyPriority>
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 01       	movw	r18, r24
    1b60:	22 0f       	add	r18, r18
    1b62:	33 1f       	adc	r19, r19
    1b64:	22 0f       	add	r18, r18
    1b66:	33 1f       	adc	r19, r19
    1b68:	22 0f       	add	r18, r18
    1b6a:	33 1f       	adc	r19, r19
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	b8 01       	movw	r22, r16
    1b72:	8d 5e       	subi	r24, 0xED	; 237
    1b74:	95 4f       	sbci	r25, 0xF5	; 245
    1b76:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vListInsertEnd>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <xTaskPriorityDisinherit+0x76>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <xTaskPriorityDisinherit+0x76>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <xTaskPriorityDisinherit+0x76>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret

00001b92 <pvTaskIncrementMutexHeldCount>:
    1b92:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1b96:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1b9a:	89 2b       	or	r24, r25
    1b9c:	39 f0       	breq	.+14     	; 0x1bac <pvTaskIncrementMutexHeldCount+0x1a>
    1b9e:	e0 91 76 0a 	lds	r30, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1ba2:	f0 91 77 0a 	lds	r31, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1ba6:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	86 a7       	std	Z+46, r24	; 0x2e
    1bac:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <pxCurrentTCB>
    1bb0:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <pxCurrentTCB+0x1>
    1bb4:	08 95       	ret

00001bb6 <sendUTFStr>:
#include "MQTT.h"
#include <string.h>

u16 PID = 1;
u8 proName[] = "MQTT";
void sendUTFStr(u8* str){
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
	Uart_SendByte(UART_0,0x00); // MSB = 0 because packet len < 256
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,strlen((char*)str));
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	01 90       	ld	r0, Z+
    1bc8:	00 20       	and	r0, r0
    1bca:	e9 f7       	brne	.-6      	; 0x1bc6 <sendUTFStr+0x10>
    1bcc:	31 97       	sbiw	r30, 0x01	; 1
    1bce:	bf 01       	movw	r22, r30
    1bd0:	6c 1b       	sub	r22, r28
    1bd2:	7d 0b       	sbc	r23, r29
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendStr(UART_0, str);
    1bda:	be 01       	movw	r22, r28
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Uart_SendStr>
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <MQTT_Connect>:
void MQTT_Connect(u8* id){
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	8c 01       	movw	r16, r24
	u8 RL = (2 + strlen((char*)proName)) + 1 + 1 + 2 + ( 2 + strlen((char*)id));
    1bf6:	ce e0       	ldi	r28, 0x0E	; 14
    1bf8:	d1 e0       	ldi	r29, 0x01	; 1
    1bfa:	09 90       	ld	r0, Y+
    1bfc:	00 20       	and	r0, r0
    1bfe:	e9 f7       	brne	.-6      	; 0x1bfa <MQTT_Connect+0x12>
    1c00:	21 97       	sbiw	r28, 0x01	; 1
    1c02:	ce 01       	movw	r24, r28
    1c04:	8e 50       	subi	r24, 0x0E	; 14
    1c06:	91 40       	sbci	r25, 0x01	; 1
    1c08:	7c 01       	movw	r14, r24
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	00 20       	and	r0, r0
    1c10:	e9 f7       	brne	.-6      	; 0x1c0c <MQTT_Connect+0x24>
    1c12:	31 97       	sbiw	r30, 0x01	; 1
    1c14:	ef 01       	movw	r28, r30
    1c16:	c0 1b       	sub	r28, r16
    1c18:	d1 0b       	sbc	r29, r17
	Uart_SendByte(UART_0,0x10);
    1c1a:	60 e1       	ldi	r22, 0x10	; 16
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,RL);
    1c22:	6c 2f       	mov	r22, r28
    1c24:	6e 0d       	add	r22, r14
    1c26:	68 5f       	subi	r22, 0xF8	; 248
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	sendUTFStr(proName);
    1c2e:	8e e0       	ldi	r24, 0x0E	; 14
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	c1 df       	rcall	.-126    	; 0x1bb6 <sendUTFStr>
	Uart_SendByte(UART_0,0x04);
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,0x02);
    1c3c:	62 e0       	ldi	r22, 0x02	; 2
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,0xFF);
    1c44:	6f ef       	ldi	r22, 0xFF	; 255
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,0xFF);
    1c4c:	6f ef       	ldi	r22, 0xFF	; 255
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	sendUTFStr(id);
    1c54:	c8 01       	movw	r24, r16
    1c56:	af df       	rcall	.-162    	; 0x1bb6 <sendUTFStr>
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	08 95       	ret

00001c66 <MQTT_Publish>:
void MQTT_Publish(u8* topic, u8* msgPtr, u8 msgLen){
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	6c 01       	movw	r12, r24
    1c78:	7b 01       	movw	r14, r22
    1c7a:	14 2f       	mov	r17, r20
	u8 RL = (2 + strlen((char*)topic)) + msgLen;
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	01 90       	ld	r0, Z+
    1c80:	00 20       	and	r0, r0
    1c82:	e9 f7       	brne	.-6      	; 0x1c7e <MQTT_Publish+0x18>
    1c84:	31 97       	sbiw	r30, 0x01	; 1
    1c86:	e8 1b       	sub	r30, r24
    1c88:	f9 0b       	sbc	r31, r25
    1c8a:	c2 e0       	ldi	r28, 0x02	; 2
    1c8c:	c4 0f       	add	r28, r20
    1c8e:	ce 0f       	add	r28, r30
	u8 ind = 0;
	Uart_SendByte(UART_0,0x30);
    1c90:	60 e3       	ldi	r22, 0x30	; 48
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	Uart_SendByte(UART_0,RL);
    1c98:	6c 2f       	mov	r22, r28
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	sendUTFStr(topic);
    1ca0:	c6 01       	movw	r24, r12
    1ca2:	89 df       	rcall	.-238    	; 0x1bb6 <sendUTFStr>
	for (ind = 0; ind < msgLen; ind++)
    1ca4:	11 23       	and	r17, r17
    1ca6:	79 f0       	breq	.+30     	; 0x1cc6 <MQTT_Publish+0x60>
    1ca8:	e7 01       	movw	r28, r14
    1caa:	11 50       	subi	r17, 0x01	; 1
    1cac:	01 2f       	mov	r16, r17
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	0f 5f       	subi	r16, 0xFF	; 255
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	0e 0d       	add	r16, r14
    1cb6:	1f 1d       	adc	r17, r15
	{
		Uart_SendByte(UART_0,msgPtr[ind]);
    1cb8:	69 91       	ld	r22, Y+
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	0e 94 6d 04 	call	0x8da	; 0x8da <Uart_SendByte>
	u8 RL = (2 + strlen((char*)topic)) + msgLen;
	u8 ind = 0;
	Uart_SendByte(UART_0,0x30);
	Uart_SendByte(UART_0,RL);
	sendUTFStr(topic);
	for (ind = 0; ind < msgLen; ind++)
    1cc0:	c0 17       	cp	r28, r16
    1cc2:	d1 07       	cpc	r29, r17
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <MQTT_Publish+0x52>
	{
		Uart_SendByte(UART_0,msgPtr[ind]);
	}
}
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	08 95       	ret

00001cd8 <T_FireDetect>:


/***********************************************************************************************************/

void turnOnFireAlarm(void)
{
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	2d 97       	sbiw	r28, 0x0d	; 13
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	8d e0       	ldi	r24, 0x0D	; 13
    1cee:	e7 e2       	ldi	r30, 0x27	; 39
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	de 01       	movw	r26, r28
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	01 90       	ld	r0, Z+
    1cf8:	0d 92       	st	X+, r0
    1cfa:	8a 95       	dec	r24
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <T_FireDetect+0x1e>
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	8a e1       	ldi	r24, 0x1A	; 26
    1d06:	0e 94 db 03 	call	0x7b6	; 0x7b6 <readPin>
    1d0a:	88 23       	and	r24, r24
    1d0c:	b1 f0       	breq	.+44     	; 0x1d3a <T_FireDetect+0x62>
    1d0e:	f8 01       	movw	r30, r16
    1d10:	01 90       	ld	r0, Z+
    1d12:	00 20       	and	r0, r0
    1d14:	e9 f7       	brne	.-6      	; 0x1d10 <T_FireDetect+0x38>
    1d16:	31 97       	sbiw	r30, 0x01	; 1
    1d18:	af 01       	movw	r20, r30
    1d1a:	40 1b       	sub	r20, r16
    1d1c:	51 0b       	sbc	r21, r17
    1d1e:	b8 01       	movw	r22, r16
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	a0 df       	rcall	.-192    	; 0x1c66 <MQTT_Publish>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	70 e0       	ldi	r23, 0x00	; 0
    1d30:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <bsFireEvent>
    1d34:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <bsFireEvent+0x1>
    1d38:	2a d9       	rcall	.-3500   	; 0xf8e <xQueueGenericSend>
    1d3a:	8c e2       	ldi	r24, 0x2C	; 44
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	2a dd       	rcall	.-1452   	; 0x1794 <vTaskDelay>
    1d40:	e1 cf       	rjmp	.-62     	; 0x1d04 <T_FireDetect+0x2c>

00001d42 <T_FireAlarmAction>:
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	44 e6       	ldi	r20, 0x64	; 100
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <bsFireEvent>
    1d50:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <bsFireEvent+0x1>
    1d54:	ae d9       	rcall	.-3236   	; 0x10b2 <xQueueGenericReceive>
    1d56:	88 23       	and	r24, r24
    1d58:	49 f0       	breq	.+18     	; 0x1d6c <T_FireAlarmAction+0x2a>
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	8b e1       	ldi	r24, 0x1B	; 27
    1d5e:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	8f e0       	ldi	r24, 0x0F	; 15
    1d66:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1d6a:	08 c0       	rjmp	.+16     	; 0x1d7c <T_FireAlarmAction+0x3a>
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	8b e1       	ldi	r24, 0x1B	; 27
    1d70:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	8f e0       	ldi	r24, 0x0F	; 15
    1d78:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1d7c:	8c e2       	ldi	r24, 0x2C	; 44
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	09 dd       	rcall	.-1518   	; 0x1794 <vTaskDelay>
    1d82:	df cf       	rjmp	.-66     	; 0x1d42 <T_FireAlarmAction>

00001d84 <T_TempAction>:
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	48 eb       	ldi	r20, 0xB8	; 184
    1d88:	5b e0       	ldi	r21, 0x0B	; 11
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <bsTempEvent>
    1d92:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <bsTempEvent+0x1>
    1d96:	8d d9       	rcall	.-3302   	; 0x10b2 <xQueueGenericReceive>
    1d98:	88 23       	and	r24, r24
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <T_TempAction+0x22>
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	83 e1       	ldi	r24, 0x13	; 19
    1da0:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1da4:	ef cf       	rjmp	.-34     	; 0x1d84 <T_TempAction>
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	83 e1       	ldi	r24, 0x13	; 19
    1daa:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1dae:	ea cf       	rjmp	.-44     	; 0x1d84 <T_TempAction>

00001db0 <T_SOIL_LIGHT_Action>:
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	44 e6       	ldi	r20, 0x64	; 100
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <IrrigationEvent>
    1dbe:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <IrrigationEvent+0x1>
    1dc2:	77 d9       	rcall	.-3346   	; 0x10b2 <xQueueGenericReceive>
    1dc4:	88 23       	and	r24, r24
    1dc6:	29 f0       	breq	.+10     	; 0x1dd2 <T_SOIL_LIGHT_Action+0x22>
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	8c e1       	ldi	r24, 0x1C	; 28
    1dcc:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <T_SOIL_LIGHT_Action+0x2a>
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	8c e1       	ldi	r24, 0x1C	; 28
    1dd6:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	44 e6       	ldi	r20, 0x64	; 100
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <LightsEvent>
    1de8:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <LightsEvent+0x1>
    1dec:	62 d9       	rcall	.-3388   	; 0x10b2 <xQueueGenericReceive>
    1dee:	88 23       	and	r24, r24
    1df0:	29 f0       	breq	.+10     	; 0x1dfc <T_SOIL_LIGHT_Action+0x4c>
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	8d e1       	ldi	r24, 0x1D	; 29
    1df6:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1dfa:	da cf       	rjmp	.-76     	; 0x1db0 <T_SOIL_LIGHT_Action>
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	8d e1       	ldi	r24, 0x1D	; 29
    1e00:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    1e04:	d5 cf       	rjmp	.-86     	; 0x1db0 <T_SOIL_LIGHT_Action>

00001e06 <T_TempRead>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	e1 97       	sbiw	r28, 0x31	; 49
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	83 e1       	ldi	r24, 0x13	; 19
    1e1c:	e4 e6       	ldi	r30, 0x64	; 100
    1e1e:	f1 e0       	ldi	r31, 0x01	; 1
    1e20:	de 01       	movw	r26, r28
    1e22:	5f 96       	adiw	r26, 0x1f	; 31
    1e24:	01 90       	ld	r0, Z+
    1e26:	0d 92       	st	X+, r0
    1e28:	8a 95       	dec	r24
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <T_TempRead+0x1e>
    1e2c:	7e 01       	movw	r14, r28
    1e2e:	80 e1       	ldi	r24, 0x10	; 16
    1e30:	e8 0e       	add	r14, r24
    1e32:	f1 1c       	adc	r15, r1
    1e34:	8e 01       	movw	r16, r28
    1e36:	0f 5f       	subi	r16, 0xFF	; 255
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	6e 01       	movw	r12, r28
    1e3c:	8f e1       	ldi	r24, 0x1F	; 31
    1e3e:	c8 0e       	add	r12, r24
    1e40:	d1 1c       	adc	r13, r1
    1e42:	44 e3       	ldi	r20, 0x34	; 52
    1e44:	51 e0       	ldi	r21, 0x01	; 1
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1e4e:	43 e4       	ldi	r20, 0x43	; 67
    1e50:	51 e0       	ldi	r21, 0x01	; 1
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1e5a:	b8 01       	movw	r22, r16
    1e5c:	c7 01       	movw	r24, r14
    1e5e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DHT_Represent>
    1e62:	a7 01       	movw	r20, r14
    1e64:	67 e0       	ldi	r22, 0x07	; 7
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1e6c:	a8 01       	movw	r20, r16
    1e6e:	66 e0       	ldi	r22, 0x06	; 6
    1e70:	84 e0       	ldi	r24, 0x04	; 4
    1e72:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1e76:	64 e5       	ldi	r22, 0x54	; 84
    1e78:	71 e0       	ldi	r23, 0x01	; 1
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	be d2       	rcall	.+1404   	; 0x23fa <strcmp>
    1e7e:	18 16       	cp	r1, r24
    1e80:	19 06       	cpc	r1, r25
    1e82:	34 f5       	brge	.+76     	; 0x1ed0 <T_TempRead+0xca>
    1e84:	f6 01       	movw	r30, r12
    1e86:	01 90       	ld	r0, Z+
    1e88:	00 20       	and	r0, r0
    1e8a:	e9 f7       	brne	.-6      	; 0x1e86 <T_TempRead+0x80>
    1e8c:	31 97       	sbiw	r30, 0x01	; 1
    1e8e:	af 01       	movw	r20, r30
    1e90:	4c 19       	sub	r20, r12
    1e92:	5d 09       	sbc	r21, r13
    1e94:	b6 01       	movw	r22, r12
    1e96:	87 e5       	ldi	r24, 0x57	; 87
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	e5 de       	rcall	.-566    	; 0x1c66 <MQTT_Publish>
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	01 90       	ld	r0, Z+
    1ea0:	00 20       	and	r0, r0
    1ea2:	e9 f7       	brne	.-6      	; 0x1e9e <T_TempRead+0x98>
    1ea4:	31 97       	sbiw	r30, 0x01	; 1
    1ea6:	af 01       	movw	r20, r30
    1ea8:	40 1b       	sub	r20, r16
    1eaa:	51 0b       	sbc	r21, r17
    1eac:	b8 01       	movw	r22, r16
    1eae:	87 e5       	ldi	r24, 0x57	; 87
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	d9 de       	rcall	.-590    	; 0x1c66 <MQTT_Publish>
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	60 e0       	ldi	r22, 0x00	; 0
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <bsTempEvent>
    1ec2:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <bsTempEvent+0x1>
    1ec6:	63 d8       	rcall	.-3898   	; 0xf8e <xQueueGenericSend>
    1ec8:	88 ee       	ldi	r24, 0xE8	; 232
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	63 dc       	rcall	.-1850   	; 0x1794 <vTaskDelay>
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <T_TempRead+0xe8>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	00 20       	and	r0, r0
    1ed6:	e9 f7       	brne	.-6      	; 0x1ed2 <T_TempRead+0xcc>
    1ed8:	31 97       	sbiw	r30, 0x01	; 1
    1eda:	af 01       	movw	r20, r30
    1edc:	40 1b       	sub	r20, r16
    1ede:	51 0b       	sbc	r21, r17
    1ee0:	b8 01       	movw	r22, r16
    1ee2:	87 e5       	ldi	r24, 0x57	; 87
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	bf de       	rcall	.-642    	; 0x1c66 <MQTT_Publish>
    1ee8:	88 ee       	ldi	r24, 0xE8	; 232
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	53 dc       	rcall	.-1882   	; 0x1794 <vTaskDelay>
    1eee:	f7 01       	movw	r30, r14
    1ef0:	01 90       	ld	r0, Z+
    1ef2:	00 20       	and	r0, r0
    1ef4:	e9 f7       	brne	.-6      	; 0x1ef0 <T_TempRead+0xea>
    1ef6:	31 97       	sbiw	r30, 0x01	; 1
    1ef8:	af 01       	movw	r20, r30
    1efa:	4e 19       	sub	r20, r14
    1efc:	5f 09       	sbc	r21, r15
    1efe:	b7 01       	movw	r22, r14
    1f00:	8e e5       	ldi	r24, 0x5E	; 94
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	b0 de       	rcall	.-672    	; 0x1c66 <MQTT_Publish>
    1f06:	88 ee       	ldi	r24, 0xE8	; 232
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	44 dc       	rcall	.-1912   	; 0x1794 <vTaskDelay>
    1f0c:	9a cf       	rjmp	.-204    	; 0x1e42 <T_TempRead+0x3c>

00001f0e <T_SOIL_LIGHT_Input>:
    1f0e:	04 e6       	ldi	r16, 0x64	; 100
    1f10:	10 e0       	ldi	r17, 0x00	; 0
    1f12:	0f 2e       	mov	r0, r31
    1f14:	fb ef       	ldi	r31, 0xFB	; 251
    1f16:	4f 2e       	mov	r4, r31
    1f18:	f3 e0       	ldi	r31, 0x03	; 3
    1f1a:	5f 2e       	mov	r5, r31
    1f1c:	61 2c       	mov	r6, r1
    1f1e:	71 2c       	mov	r7, r1
    1f20:	f0 2d       	mov	r31, r0
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 b5 02 	call	0x56a	; 0x56a <read_analog>
    1f2a:	ec 01       	movw	r28, r24
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 b5 02 	call	0x56a	; 0x56a <read_analog>
    1f34:	7c 01       	movw	r14, r24
    1f36:	9e 01       	movw	r18, r28
    1f38:	a4 e6       	ldi	r26, 0x64	; 100
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	3b d2       	rcall	.+1142   	; 0x23b4 <__umulhisi3>
    1f3e:	a3 01       	movw	r20, r6
    1f40:	92 01       	movw	r18, r4
    1f42:	16 d2       	rcall	.+1068   	; 0x2370 <__udivmodsi4>
    1f44:	e8 01       	movw	r28, r16
    1f46:	c2 1b       	sub	r28, r18
    1f48:	d3 0b       	sbc	r29, r19
    1f4a:	97 01       	movw	r18, r14
    1f4c:	a4 e6       	ldi	r26, 0x64	; 100
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	31 d2       	rcall	.+1122   	; 0x23b4 <__umulhisi3>
    1f52:	27 e9       	ldi	r18, 0x97	; 151
    1f54:	31 e0       	ldi	r19, 0x01	; 1
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	0a d2       	rcall	.+1044   	; 0x2370 <__udivmodsi4>
    1f5c:	69 01       	movw	r12, r18
    1f5e:	7a 01       	movw	r14, r20
    1f60:	59 01       	movw	r10, r18
    1f62:	47 e7       	ldi	r20, 0x77	; 119
    1f64:	51 e0       	ldi	r21, 0x01	; 1
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1f6e:	6c e0       	ldi	r22, 0x0C	; 12
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_GOTXY>
    1f76:	be 01       	movw	r22, r28
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <disp_int>
    1f80:	47 e8       	ldi	r20, 0x87	; 135
    1f82:	51 e0       	ldi	r21, 0x01	; 1
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    1f8c:	67 e0       	ldi	r22, 0x07	; 7
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_GOTXY>
    1f94:	c7 01       	movw	r24, r14
    1f96:	b6 01       	movw	r22, r12
    1f98:	88 27       	eor	r24, r24
    1f9a:	99 27       	eor	r25, r25
    1f9c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <disp_int>
    1fa0:	6f 97       	sbiw	r28, 0x1f	; 31
    1fa2:	58 f4       	brcc	.+22     	; 0x1fba <T_SOIL_LIGHT_Input+0xac>
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <IrrigationEvent>
    1fb2:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <IrrigationEvent+0x1>
    1fb6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    1fba:	8e e1       	ldi	r24, 0x1E	; 30
    1fbc:	a8 16       	cp	r10, r24
    1fbe:	b1 04       	cpc	r11, r1
    1fc0:	58 f4       	brcc	.+22     	; 0x1fd8 <T_SOIL_LIGHT_Input+0xca>
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <LightsEvent>
    1fd0:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <LightsEvent+0x1>
    1fd4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    1fd8:	c8 01       	movw	r24, r16
    1fda:	dc db       	rcall	.-2120   	; 0x1794 <vTaskDelay>
    1fdc:	a2 cf       	rjmp	.-188    	; 0x1f22 <T_SOIL_LIGHT_Input+0x14>

00001fde <T_PasswordGet>:
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <T_PasswordGet+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <T_PasswordGet+0x8>
    1fe6:	1f 92       	push	r1
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	fe 01       	movw	r30, r28
    1fee:	31 96       	adiw	r30, 0x01	; 1
    1ff0:	85 e0       	ldi	r24, 0x05	; 5
    1ff2:	df 01       	movw	r26, r30
    1ff4:	1d 92       	st	X+, r1
    1ff6:	8a 95       	dec	r24
    1ff8:	e9 f7       	brne	.-6      	; 0x1ff4 <T_PasswordGet+0x16>
    1ffa:	7f 01       	movw	r14, r30
    1ffc:	de 2e       	mov	r13, r30
    1ffe:	0f 2d       	mov	r16, r15
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	4c e2       	ldi	r20, 0x2C	; 44
    2004:	51 e0       	ldi	r21, 0x01	; 1
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <bsEnterAgain>
    200e:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <bsEnterAgain+0x1>
    2012:	4f d8       	rcall	.-3938   	; 0x10b2 <xQueueGenericReceive>
    2014:	88 23       	and	r24, r24
    2016:	a1 f1       	breq	.+104    	; 0x2080 <T_PasswordGet+0xa2>
    2018:	0e 94 08 02 	call	0x410	; 0x410 <LCD_CLEAR>
    201c:	42 e9       	ldi	r20, 0x92	; 146
    201e:	51 e0       	ldi	r21, 0x01	; 1
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    2028:	10 e0       	ldi	r17, 0x00	; 0
    202a:	0e 94 a3 01 	call	0x346	; 0x346 <GetKey>
    202e:	83 32       	cpi	r24, 0x23	; 35
    2030:	69 f0       	breq	.+26     	; 0x204c <T_PasswordGet+0x6e>
    2032:	88 23       	and	r24, r24
    2034:	19 f1       	breq	.+70     	; 0x207c <T_PasswordGet+0x9e>
    2036:	f7 01       	movw	r30, r14
    2038:	e1 0f       	add	r30, r17
    203a:	f1 1d       	adc	r31, r1
    203c:	80 83       	st	Z, r24
    203e:	1f 5f       	subi	r17, 0xFF	; 255
    2040:	48 2f       	mov	r20, r24
    2042:	61 2f       	mov	r22, r17
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	0e 94 6e 02 	call	0x4dc	; 0x4dc <disp_charXY>
    204a:	18 c0       	rjmp	.+48     	; 0x207c <T_PasswordGet+0x9e>
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	4c e2       	ldi	r20, 0x2C	; 44
    2050:	51 e0       	ldi	r21, 0x01	; 1
    2052:	6d 2d       	mov	r22, r13
    2054:	70 2f       	mov	r23, r16
    2056:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <mqPassword>
    205a:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <mqPassword+0x1>
    205e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <bsPassEntered>
    2070:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <bsPassEntered+0x1>
    2074:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	d7 cf       	rjmp	.-82     	; 0x202a <T_PasswordGet+0x4c>
    207c:	15 30       	cpi	r17, 0x05	; 5
    207e:	a8 f2       	brcs	.-86     	; 0x202a <T_PasswordGet+0x4c>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	87 db       	rcall	.-2290   	; 0x1794 <vTaskDelay>
    2086:	bc cf       	rjmp	.-136    	; 0x2000 <T_PasswordGet+0x22>

00002088 <T_PasswordCheck>:
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	00 d0       	rcall	.+0      	; 0x208e <T_PasswordCheck+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <T_PasswordCheck+0x8>
    2090:	1f 92       	push	r1
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	fe 01       	movw	r30, r28
    2098:	31 96       	adiw	r30, 0x01	; 1
    209a:	85 e0       	ldi	r24, 0x05	; 5
    209c:	df 01       	movw	r26, r30
    209e:	1d 92       	st	X+, r1
    20a0:	8a 95       	dec	r24
    20a2:	e9 f7       	brne	.-6      	; 0x209e <T_PasswordCheck+0x16>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	48 ee       	ldi	r20, 0xE8	; 232
    20a8:	53 e0       	ldi	r21, 0x03	; 3
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <bsPassEntered>
    20b2:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <bsPassEntered+0x1>
    20b6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <xQueueGenericReceive>
    20ba:	88 23       	and	r24, r24
    20bc:	99 f3       	breq	.-26     	; 0x20a4 <T_PasswordCheck+0x1c>
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	44 e6       	ldi	r20, 0x64	; 100
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	be 01       	movw	r22, r28
    20c6:	6f 5f       	subi	r22, 0xFF	; 255
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <mqPassword>
    20ce:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <mqPassword+0x1>
    20d2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <xQueueGenericReceive>
    20d6:	be 01       	movw	r22, r28
    20d8:	6f 5f       	subi	r22, 0xFF	; 255
    20da:	7f 4f       	sbci	r23, 0xFF	; 255
    20dc:	83 e1       	ldi	r24, 0x13	; 19
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	8c d1       	rcall	.+792    	; 0x23fa <strcmp>
    20e2:	89 2b       	or	r24, r25
    20e4:	d1 f4       	brne	.+52     	; 0x211a <T_PasswordCheck+0x92>
    20e6:	0e 94 08 02 	call	0x410	; 0x410 <LCD_CLEAR>
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	84 e1       	ldi	r24, 0x14	; 20
    20ee:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    20f2:	43 ea       	ldi	r20, 0xA3	; 163
    20f4:	51 e0       	ldi	r21, 0x01	; 1
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    20fe:	bf ef       	ldi	r27, 0xFF	; 255
    2100:	2d e3       	ldi	r18, 0x3D	; 61
    2102:	89 e4       	ldi	r24, 0x49	; 73
    2104:	b1 50       	subi	r27, 0x01	; 1
    2106:	20 40       	sbci	r18, 0x00	; 0
    2108:	80 40       	sbci	r24, 0x00	; 0
    210a:	e1 f7       	brne	.-8      	; 0x2104 <T_PasswordCheck+0x7c>
    210c:	00 c0       	rjmp	.+0      	; 0x210e <T_PasswordCheck+0x86>
    210e:	00 00       	nop
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	84 e1       	ldi	r24, 0x14	; 20
    2114:	0e 94 c1 02 	call	0x582	; 0x582 <writePin>
    2118:	1e c0       	rjmp	.+60     	; 0x2156 <T_PasswordCheck+0xce>
    211a:	0e 94 08 02 	call	0x410	; 0x410 <LCD_CLEAR>
    211e:	41 eb       	ldi	r20, 0xB1	; 177
    2120:	51 e0       	ldi	r21, 0x01	; 1
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    212a:	88 ee       	ldi	r24, 0xE8	; 232
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	32 db       	rcall	.-2460   	; 0x1794 <vTaskDelay>
    2130:	0e 94 08 02 	call	0x410	; 0x410 <LCD_CLEAR>
    2134:	42 e9       	ldi	r20, 0x92	; 146
    2136:	51 e0       	ldi	r21, 0x01	; 1
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <bsEnterAgain>
    214e:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <bsEnterAgain+0x1>
    2152:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
    2156:	88 ec       	ldi	r24, 0xC8	; 200
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	1c db       	rcall	.-2504   	; 0x1794 <vTaskDelay>
    215c:	a3 cf       	rjmp	.-186    	; 0x20a4 <T_PasswordCheck+0x1c>

0000215e <Project_Init>:
	//Callback(FireAlarm);
}

void Project_Init(void)
{
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
	KEYPAD_Init();
    216c:	0e 94 8e 01 	call	0x31c	; 0x31c <KEYPAD_Init>
	LCD_init();
    2170:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_init>
	ADC_init();
    2174:	0e 94 b0 02 	call	0x560	; 0x560 <ADC_init>
	Uart_Init(UART_0, 9600);
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	55 e2       	ldi	r21, 0x25	; 37
    217c:	60 e0       	ldi	r22, 0x00	; 0
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 35 04 	call	0x86a	; 0x86a <Uart_Init>
	
	
	
	
	MQTT_Connect((u8*)"1111");
    2186:	8c eb       	ldi	r24, 0xBC	; 188
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	2e dd       	rcall	.-1444   	; 0x1be8 <MQTT_Connect>
	disp_strXY(1,1,(u8*)"** WELCOM TO ***");
    218c:	41 ec       	ldi	r20, 0xC1	; 193
    218e:	51 e0       	ldi	r21, 0x01	; 1
    2190:	61 e0       	ldi	r22, 0x01	; 1
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
	disp_strXY(2,1,(u8*)"**** SMART *****");
    2198:	42 ed       	ldi	r20, 0xD2	; 210
    219a:	51 e0       	ldi	r21, 0x01	; 1
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
	disp_strXY(3,1,(u8*)"**** HOME ******");
    21a4:	43 ee       	ldi	r20, 0xE3	; 227
    21a6:	51 e0       	ldi	r21, 0x01	; 1
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
	disp_strXY(4,1,(u8*)"****************");
    21b0:	44 ef       	ldi	r20, 0xF4	; 244
    21b2:	51 e0       	ldi	r21, 0x01	; 1
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	84 e0       	ldi	r24, 0x04	; 4
    21b8:	0e 94 75 02 	call	0x4ea	; 0x4ea <disp_strXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21bc:	2f ef       	ldi	r18, 0xFF	; 255
    21be:	8d e3       	ldi	r24, 0x3D	; 61
    21c0:	99 e4       	ldi	r25, 0x49	; 73
    21c2:	21 50       	subi	r18, 0x01	; 1
    21c4:	80 40       	sbci	r24, 0x00	; 0
    21c6:	90 40       	sbci	r25, 0x00	; 0
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <Project_Init+0x64>
    21ca:	00 c0       	rjmp	.+0      	; 0x21cc <Project_Init+0x6e>
    21cc:	00 00       	nop
	_delay_ms(3000);
	LCD_CLEAR();
    21ce:	0e 94 08 02 	call	0x410	; 0x410 <LCD_CLEAR>
	
	
	pinDirection(DOOR_LED,OUTPUT);
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	84 e1       	ldi	r24, 0x14	; 20
    21d6:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	
	
	pinDirection(TV_PIN,OUTPUT);
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	8f e1       	ldi	r24, 0x1F	; 31
    21de:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	pinDirection(INNERLIGHT,OUTPUT);
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	8e e1       	ldi	r24, 0x1E	; 30
    21e6:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	
	/*fire system config*/
	xTaskCreate(T_FireDetect,NULL,100,NULL,9,NULL);
    21ea:	a1 2c       	mov	r10, r1
    21ec:	b1 2c       	mov	r11, r1
    21ee:	c1 2c       	mov	r12, r1
    21f0:	d1 2c       	mov	r13, r1
    21f2:	e1 2c       	mov	r14, r1
    21f4:	f1 2c       	mov	r15, r1
    21f6:	09 e0       	ldi	r16, 0x09	; 9
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	44 e6       	ldi	r20, 0x64	; 100
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	8c e6       	ldi	r24, 0x6C	; 108
    2206:	9e e0       	ldi	r25, 0x0E	; 14
    2208:	59 d8       	rcall	.-3918   	; 0x12bc <xTaskGenericCreate>
	xTaskCreate(T_FireAlarmAction,NULL,100,NULL,10,NULL);
    220a:	0a e0       	ldi	r16, 0x0A	; 10
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	44 e6       	ldi	r20, 0x64	; 100
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	81 ea       	ldi	r24, 0xA1	; 161
    221a:	9e e0       	ldi	r25, 0x0E	; 14
    221c:	4f d8       	rcall	.-3938   	; 0x12bc <xTaskGenericCreate>
	bsFireEvent=xSemaphoreCreateBinary();
    221e:	43 e0       	ldi	r20, 0x03	; 3
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    2228:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <bsFireEvent+0x1>
    222c:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <bsFireEvent>
	pinDirection(FLAME_SENSOR,INPUT);//Flame sensor as input
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	8a e1       	ldi	r24, 0x1A	; 26
    2234:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	pinDirection(FIREPUMP,OUTPUT);
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	8b e1       	ldi	r24, 0x1B	; 27
    223c:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	pinDirection(BUZZER,OUTPUT);
    2240:	61 e0       	ldi	r22, 0x01	; 1
    2242:	8f e0       	ldi	r24, 0x0F	; 15
    2244:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	
	
	/*Temperature system config*/
 	xTaskCreate(T_TempRead,NULL,200,NULL,7,NULL);
    2248:	07 e0       	ldi	r16, 0x07	; 7
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	48 ec       	ldi	r20, 0xC8	; 200
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	9f e0       	ldi	r25, 0x0F	; 15
    225a:	30 d8       	rcall	.-4000   	; 0x12bc <xTaskGenericCreate>
 	xTaskCreate(T_TempAction,NULL,100,NULL,8,NULL);
    225c:	08 e0       	ldi	r16, 0x08	; 8
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	44 e6       	ldi	r20, 0x64	; 100
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	82 ec       	ldi	r24, 0xC2	; 194
    226c:	9e e0       	ldi	r25, 0x0E	; 14
    226e:	26 d8       	rcall	.-4020   	; 0x12bc <xTaskGenericCreate>
	bsTempEvent=xSemaphoreCreateBinary();
    2270:	43 e0       	ldi	r20, 0x03	; 3
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    227a:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <bsTempEvent+0x1>
    227e:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <bsTempEvent>
	pinDirection(FAN,OUTPUT);
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	83 e1       	ldi	r24, 0x13	; 19
    2286:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	
	/*Door Security system config*/
	xTaskCreate(T_PasswordGet,NULL,100,NULL,1,NULL);
    228a:	01 e0       	ldi	r16, 0x01	; 1
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	44 e6       	ldi	r20, 0x64	; 100
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	8f ee       	ldi	r24, 0xEF	; 239
    229a:	9f e0       	ldi	r25, 0x0F	; 15
    229c:	0f d8       	rcall	.-4066   	; 0x12bc <xTaskGenericCreate>
	xTaskCreate(T_PasswordCheck,NULL,100,NULL,2,NULL);
    229e:	02 e0       	ldi	r16, 0x02	; 2
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	44 e6       	ldi	r20, 0x64	; 100
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	84 e4       	ldi	r24, 0x44	; 68
    22ae:	90 e1       	ldi	r25, 0x10	; 16
    22b0:	05 d8       	rcall	.-4086   	; 0x12bc <xTaskGenericCreate>
	//xTaskCreate(T_DoorAction,NULL,100,NULL,6,NULL);
	//bsPassEvent		=	xSemaphoreCreateBinary();
	bsEnterAgain	=	xSemaphoreCreateBinary();
    22b2:	43 e0       	ldi	r20, 0x03	; 3
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    22bc:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <bsEnterAgain+0x1>
    22c0:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <bsEnterAgain>
	bsPassEntered	=	xSemaphoreCreateBinary();
    22c4:	43 e0       	ldi	r20, 0x03	; 3
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    22ce:	90 93 7d 0a 	sts	0x0A7D, r25	; 0x800a7d <bsPassEntered+0x1>
    22d2:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <bsPassEntered>
	mqPassword		=	xQueueCreate(PASS_NUM,PASS_LENGTH);
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    22e0:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <mqPassword+0x1>
    22e4:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <mqPassword>
	xSemaphoreGive(bsEnterAgain);
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <bsEnterAgain>
    22f6:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <bsEnterAgain+0x1>
    22fa:	0e 94 c7 07 	call	0xf8e	; 0xf8e <xQueueGenericSend>
	
	
	/* SOIL IRRIGATION and LIGHTS IN NIGHT */
	xTaskCreate(T_SOIL_LIGHT_Input,NULL,100,NULL,3,NULL);
    22fe:	03 e0       	ldi	r16, 0x03	; 3
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	44 e6       	ldi	r20, 0x64	; 100
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	87 e8       	ldi	r24, 0x87	; 135
    230e:	9f e0       	ldi	r25, 0x0F	; 15
    2310:	0e 94 5e 09 	call	0x12bc	; 0x12bc <xTaskGenericCreate>
	xTaskCreate(T_SOIL_LIGHT_Action,NULL,100,NULL,4,NULL);
    2314:	04 e0       	ldi	r16, 0x04	; 4
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	44 e6       	ldi	r20, 0x64	; 100
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	88 ed       	ldi	r24, 0xD8	; 216
    2324:	9e e0       	ldi	r25, 0x0E	; 14
    2326:	0e 94 5e 09 	call	0x12bc	; 0x12bc <xTaskGenericCreate>
	IrrigationEvent = xSemaphoreCreateBinary(); // make sure if it is initially = 0
    232a:	43 e0       	ldi	r20, 0x03	; 3
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    2334:	90 93 81 0a 	sts	0x0A81, r25	; 0x800a81 <IrrigationEvent+0x1>
    2338:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <IrrigationEvent>
	LightsEvent	    = xSemaphoreCreateBinary();
    233c:	43 e0       	ldi	r20, 0x03	; 3
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 9d 07 	call	0xf3a	; 0xf3a <xQueueGenericCreate>
    2346:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <LightsEvent+0x1>
    234a:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <LightsEvent>
	pinDirection(SOIL_PUMP,OUTPUT);
    234e:	61 e0       	ldi	r22, 0x01	; 1
    2350:	8c e1       	ldi	r24, 0x1C	; 28
    2352:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	pinDirection(OUTERLIGHT,OUTPUT);
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	8d e1       	ldi	r24, 0x1D	; 29
    235a:	0e 94 4e 03 	call	0x69c	; 0x69c <pinDirection>
	
	
	
	
	
	vTaskStartScheduler();
    235e:	b5 d8       	rcall	.-3734   	; 0x14ca <vTaskStartScheduler>
}
    2360:	0f 91       	pop	r16
    2362:	ff 90       	pop	r15
    2364:	ef 90       	pop	r14
    2366:	df 90       	pop	r13
    2368:	cf 90       	pop	r12
    236a:	bf 90       	pop	r11
    236c:	af 90       	pop	r10
    236e:	08 95       	ret

00002370 <__udivmodsi4>:
    2370:	a1 e2       	ldi	r26, 0x21	; 33
    2372:	1a 2e       	mov	r1, r26
    2374:	aa 1b       	sub	r26, r26
    2376:	bb 1b       	sub	r27, r27
    2378:	fd 01       	movw	r30, r26
    237a:	0d c0       	rjmp	.+26     	; 0x2396 <__udivmodsi4_ep>

0000237c <__udivmodsi4_loop>:
    237c:	aa 1f       	adc	r26, r26
    237e:	bb 1f       	adc	r27, r27
    2380:	ee 1f       	adc	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	a2 17       	cp	r26, r18
    2386:	b3 07       	cpc	r27, r19
    2388:	e4 07       	cpc	r30, r20
    238a:	f5 07       	cpc	r31, r21
    238c:	20 f0       	brcs	.+8      	; 0x2396 <__udivmodsi4_ep>
    238e:	a2 1b       	sub	r26, r18
    2390:	b3 0b       	sbc	r27, r19
    2392:	e4 0b       	sbc	r30, r20
    2394:	f5 0b       	sbc	r31, r21

00002396 <__udivmodsi4_ep>:
    2396:	66 1f       	adc	r22, r22
    2398:	77 1f       	adc	r23, r23
    239a:	88 1f       	adc	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	1a 94       	dec	r1
    23a0:	69 f7       	brne	.-38     	; 0x237c <__udivmodsi4_loop>
    23a2:	60 95       	com	r22
    23a4:	70 95       	com	r23
    23a6:	80 95       	com	r24
    23a8:	90 95       	com	r25
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	bd 01       	movw	r22, r26
    23b0:	cf 01       	movw	r24, r30
    23b2:	08 95       	ret

000023b4 <__umulhisi3>:
    23b4:	a2 9f       	mul	r26, r18
    23b6:	b0 01       	movw	r22, r0
    23b8:	b3 9f       	mul	r27, r19
    23ba:	c0 01       	movw	r24, r0
    23bc:	a3 9f       	mul	r26, r19
    23be:	70 0d       	add	r23, r0
    23c0:	81 1d       	adc	r24, r1
    23c2:	11 24       	eor	r1, r1
    23c4:	91 1d       	adc	r25, r1
    23c6:	b2 9f       	mul	r27, r18
    23c8:	70 0d       	add	r23, r0
    23ca:	81 1d       	adc	r24, r1
    23cc:	11 24       	eor	r1, r1
    23ce:	91 1d       	adc	r25, r1
    23d0:	08 95       	ret

000023d2 <memcpy>:
    23d2:	fb 01       	movw	r30, r22
    23d4:	dc 01       	movw	r26, r24
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <memcpy+0xa>
    23d8:	01 90       	ld	r0, Z+
    23da:	0d 92       	st	X+, r0
    23dc:	41 50       	subi	r20, 0x01	; 1
    23de:	50 40       	sbci	r21, 0x00	; 0
    23e0:	d8 f7       	brcc	.-10     	; 0x23d8 <memcpy+0x6>
    23e2:	08 95       	ret

000023e4 <strcat>:
    23e4:	fb 01       	movw	r30, r22
    23e6:	dc 01       	movw	r26, r24
    23e8:	0d 90       	ld	r0, X+
    23ea:	00 20       	and	r0, r0
    23ec:	e9 f7       	brne	.-6      	; 0x23e8 <strcat+0x4>
    23ee:	11 97       	sbiw	r26, 0x01	; 1
    23f0:	01 90       	ld	r0, Z+
    23f2:	0d 92       	st	X+, r0
    23f4:	00 20       	and	r0, r0
    23f6:	e1 f7       	brne	.-8      	; 0x23f0 <strcat+0xc>
    23f8:	08 95       	ret

000023fa <strcmp>:
    23fa:	fb 01       	movw	r30, r22
    23fc:	dc 01       	movw	r26, r24
    23fe:	8d 91       	ld	r24, X+
    2400:	01 90       	ld	r0, Z+
    2402:	80 19       	sub	r24, r0
    2404:	01 10       	cpse	r0, r1
    2406:	d9 f3       	breq	.-10     	; 0x23fe <strcmp+0x4>
    2408:	99 0b       	sbc	r25, r25
    240a:	08 95       	ret

0000240c <sprintf>:
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	2e 97       	sbiw	r28, 0x0e	; 14
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	0d 89       	ldd	r16, Y+21	; 0x15
    2426:	1e 89       	ldd	r17, Y+22	; 0x16
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	8c 83       	std	Y+4, r24	; 0x04
    242c:	1a 83       	std	Y+2, r17	; 0x02
    242e:	09 83       	std	Y+1, r16	; 0x01
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	9f e7       	ldi	r25, 0x7F	; 127
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	ae 01       	movw	r20, r28
    243a:	47 5e       	subi	r20, 0xE7	; 231
    243c:	5f 4f       	sbci	r21, 0xFF	; 255
    243e:	6f 89       	ldd	r22, Y+23	; 0x17
    2440:	78 8d       	ldd	r23, Y+24	; 0x18
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	10 d0       	rcall	.+32     	; 0x2468 <vfprintf>
    2448:	ef 81       	ldd	r30, Y+7	; 0x07
    244a:	f8 85       	ldd	r31, Y+8	; 0x08
    244c:	e0 0f       	add	r30, r16
    244e:	f1 1f       	adc	r31, r17
    2450:	10 82       	st	Z, r1
    2452:	2e 96       	adiw	r28, 0x0e	; 14
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <vfprintf>:
    2468:	2f 92       	push	r2
    246a:	3f 92       	push	r3
    246c:	4f 92       	push	r4
    246e:	5f 92       	push	r5
    2470:	6f 92       	push	r6
    2472:	7f 92       	push	r7
    2474:	8f 92       	push	r8
    2476:	9f 92       	push	r9
    2478:	af 92       	push	r10
    247a:	bf 92       	push	r11
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	cf 93       	push	r28
    248a:	df 93       	push	r29
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	2b 97       	sbiw	r28, 0x0b	; 11
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	6c 01       	movw	r12, r24
    249e:	7b 01       	movw	r14, r22
    24a0:	8a 01       	movw	r16, r20
    24a2:	fc 01       	movw	r30, r24
    24a4:	17 82       	std	Z+7, r1	; 0x07
    24a6:	16 82       	std	Z+6, r1	; 0x06
    24a8:	83 81       	ldd	r24, Z+3	; 0x03
    24aa:	81 ff       	sbrs	r24, 1
    24ac:	bf c1       	rjmp	.+894    	; 0x282c <vfprintf+0x3c4>
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	3c 01       	movw	r6, r24
    24b4:	f6 01       	movw	r30, r12
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	f7 01       	movw	r30, r14
    24ba:	93 fd       	sbrc	r25, 3
    24bc:	85 91       	lpm	r24, Z+
    24be:	93 ff       	sbrs	r25, 3
    24c0:	81 91       	ld	r24, Z+
    24c2:	7f 01       	movw	r14, r30
    24c4:	88 23       	and	r24, r24
    24c6:	09 f4       	brne	.+2      	; 0x24ca <vfprintf+0x62>
    24c8:	ad c1       	rjmp	.+858    	; 0x2824 <vfprintf+0x3bc>
    24ca:	85 32       	cpi	r24, 0x25	; 37
    24cc:	39 f4       	brne	.+14     	; 0x24dc <vfprintf+0x74>
    24ce:	93 fd       	sbrc	r25, 3
    24d0:	85 91       	lpm	r24, Z+
    24d2:	93 ff       	sbrs	r25, 3
    24d4:	81 91       	ld	r24, Z+
    24d6:	7f 01       	movw	r14, r30
    24d8:	85 32       	cpi	r24, 0x25	; 37
    24da:	21 f4       	brne	.+8      	; 0x24e4 <vfprintf+0x7c>
    24dc:	b6 01       	movw	r22, r12
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	d6 d1       	rcall	.+940    	; 0x288e <fputc>
    24e2:	e8 cf       	rjmp	.-48     	; 0x24b4 <vfprintf+0x4c>
    24e4:	91 2c       	mov	r9, r1
    24e6:	21 2c       	mov	r2, r1
    24e8:	31 2c       	mov	r3, r1
    24ea:	ff e1       	ldi	r31, 0x1F	; 31
    24ec:	f3 15       	cp	r31, r3
    24ee:	d8 f0       	brcs	.+54     	; 0x2526 <vfprintf+0xbe>
    24f0:	8b 32       	cpi	r24, 0x2B	; 43
    24f2:	79 f0       	breq	.+30     	; 0x2512 <vfprintf+0xaa>
    24f4:	38 f4       	brcc	.+14     	; 0x2504 <vfprintf+0x9c>
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	79 f0       	breq	.+30     	; 0x2518 <vfprintf+0xb0>
    24fa:	83 32       	cpi	r24, 0x23	; 35
    24fc:	a1 f4       	brne	.+40     	; 0x2526 <vfprintf+0xbe>
    24fe:	23 2d       	mov	r18, r3
    2500:	20 61       	ori	r18, 0x10	; 16
    2502:	1d c0       	rjmp	.+58     	; 0x253e <vfprintf+0xd6>
    2504:	8d 32       	cpi	r24, 0x2D	; 45
    2506:	61 f0       	breq	.+24     	; 0x2520 <vfprintf+0xb8>
    2508:	80 33       	cpi	r24, 0x30	; 48
    250a:	69 f4       	brne	.+26     	; 0x2526 <vfprintf+0xbe>
    250c:	23 2d       	mov	r18, r3
    250e:	21 60       	ori	r18, 0x01	; 1
    2510:	16 c0       	rjmp	.+44     	; 0x253e <vfprintf+0xd6>
    2512:	83 2d       	mov	r24, r3
    2514:	82 60       	ori	r24, 0x02	; 2
    2516:	38 2e       	mov	r3, r24
    2518:	e3 2d       	mov	r30, r3
    251a:	e4 60       	ori	r30, 0x04	; 4
    251c:	3e 2e       	mov	r3, r30
    251e:	2a c0       	rjmp	.+84     	; 0x2574 <vfprintf+0x10c>
    2520:	f3 2d       	mov	r31, r3
    2522:	f8 60       	ori	r31, 0x08	; 8
    2524:	1d c0       	rjmp	.+58     	; 0x2560 <vfprintf+0xf8>
    2526:	37 fc       	sbrc	r3, 7
    2528:	2d c0       	rjmp	.+90     	; 0x2584 <vfprintf+0x11c>
    252a:	20 ed       	ldi	r18, 0xD0	; 208
    252c:	28 0f       	add	r18, r24
    252e:	2a 30       	cpi	r18, 0x0A	; 10
    2530:	40 f0       	brcs	.+16     	; 0x2542 <vfprintf+0xda>
    2532:	8e 32       	cpi	r24, 0x2E	; 46
    2534:	b9 f4       	brne	.+46     	; 0x2564 <vfprintf+0xfc>
    2536:	36 fc       	sbrc	r3, 6
    2538:	75 c1       	rjmp	.+746    	; 0x2824 <vfprintf+0x3bc>
    253a:	23 2d       	mov	r18, r3
    253c:	20 64       	ori	r18, 0x40	; 64
    253e:	32 2e       	mov	r3, r18
    2540:	19 c0       	rjmp	.+50     	; 0x2574 <vfprintf+0x10c>
    2542:	36 fe       	sbrs	r3, 6
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <vfprintf+0xea>
    2546:	8a e0       	ldi	r24, 0x0A	; 10
    2548:	98 9e       	mul	r9, r24
    254a:	20 0d       	add	r18, r0
    254c:	11 24       	eor	r1, r1
    254e:	92 2e       	mov	r9, r18
    2550:	11 c0       	rjmp	.+34     	; 0x2574 <vfprintf+0x10c>
    2552:	ea e0       	ldi	r30, 0x0A	; 10
    2554:	2e 9e       	mul	r2, r30
    2556:	20 0d       	add	r18, r0
    2558:	11 24       	eor	r1, r1
    255a:	22 2e       	mov	r2, r18
    255c:	f3 2d       	mov	r31, r3
    255e:	f0 62       	ori	r31, 0x20	; 32
    2560:	3f 2e       	mov	r3, r31
    2562:	08 c0       	rjmp	.+16     	; 0x2574 <vfprintf+0x10c>
    2564:	8c 36       	cpi	r24, 0x6C	; 108
    2566:	21 f4       	brne	.+8      	; 0x2570 <vfprintf+0x108>
    2568:	83 2d       	mov	r24, r3
    256a:	80 68       	ori	r24, 0x80	; 128
    256c:	38 2e       	mov	r3, r24
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <vfprintf+0x10c>
    2570:	88 36       	cpi	r24, 0x68	; 104
    2572:	41 f4       	brne	.+16     	; 0x2584 <vfprintf+0x11c>
    2574:	f7 01       	movw	r30, r14
    2576:	93 fd       	sbrc	r25, 3
    2578:	85 91       	lpm	r24, Z+
    257a:	93 ff       	sbrs	r25, 3
    257c:	81 91       	ld	r24, Z+
    257e:	7f 01       	movw	r14, r30
    2580:	81 11       	cpse	r24, r1
    2582:	b3 cf       	rjmp	.-154    	; 0x24ea <vfprintf+0x82>
    2584:	98 2f       	mov	r25, r24
    2586:	9f 7d       	andi	r25, 0xDF	; 223
    2588:	95 54       	subi	r25, 0x45	; 69
    258a:	93 30       	cpi	r25, 0x03	; 3
    258c:	28 f4       	brcc	.+10     	; 0x2598 <vfprintf+0x130>
    258e:	0c 5f       	subi	r16, 0xFC	; 252
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	9f e3       	ldi	r25, 0x3F	; 63
    2594:	99 83       	std	Y+1, r25	; 0x01
    2596:	0d c0       	rjmp	.+26     	; 0x25b2 <vfprintf+0x14a>
    2598:	83 36       	cpi	r24, 0x63	; 99
    259a:	31 f0       	breq	.+12     	; 0x25a8 <vfprintf+0x140>
    259c:	83 37       	cpi	r24, 0x73	; 115
    259e:	71 f0       	breq	.+28     	; 0x25bc <vfprintf+0x154>
    25a0:	83 35       	cpi	r24, 0x53	; 83
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <vfprintf+0x13e>
    25a4:	55 c0       	rjmp	.+170    	; 0x2650 <vfprintf+0x1e8>
    25a6:	20 c0       	rjmp	.+64     	; 0x25e8 <vfprintf+0x180>
    25a8:	f8 01       	movw	r30, r16
    25aa:	80 81       	ld	r24, Z
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	0e 5f       	subi	r16, 0xFE	; 254
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	88 24       	eor	r8, r8
    25b4:	83 94       	inc	r8
    25b6:	91 2c       	mov	r9, r1
    25b8:	53 01       	movw	r10, r6
    25ba:	12 c0       	rjmp	.+36     	; 0x25e0 <vfprintf+0x178>
    25bc:	28 01       	movw	r4, r16
    25be:	f2 e0       	ldi	r31, 0x02	; 2
    25c0:	4f 0e       	add	r4, r31
    25c2:	51 1c       	adc	r5, r1
    25c4:	f8 01       	movw	r30, r16
    25c6:	a0 80       	ld	r10, Z
    25c8:	b1 80       	ldd	r11, Z+1	; 0x01
    25ca:	36 fe       	sbrs	r3, 6
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <vfprintf+0x16c>
    25ce:	69 2d       	mov	r22, r9
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <vfprintf+0x170>
    25d4:	6f ef       	ldi	r22, 0xFF	; 255
    25d6:	7f ef       	ldi	r23, 0xFF	; 255
    25d8:	c5 01       	movw	r24, r10
    25da:	4e d1       	rcall	.+668    	; 0x2878 <strnlen>
    25dc:	4c 01       	movw	r8, r24
    25de:	82 01       	movw	r16, r4
    25e0:	f3 2d       	mov	r31, r3
    25e2:	ff 77       	andi	r31, 0x7F	; 127
    25e4:	3f 2e       	mov	r3, r31
    25e6:	15 c0       	rjmp	.+42     	; 0x2612 <vfprintf+0x1aa>
    25e8:	28 01       	movw	r4, r16
    25ea:	22 e0       	ldi	r18, 0x02	; 2
    25ec:	42 0e       	add	r4, r18
    25ee:	51 1c       	adc	r5, r1
    25f0:	f8 01       	movw	r30, r16
    25f2:	a0 80       	ld	r10, Z
    25f4:	b1 80       	ldd	r11, Z+1	; 0x01
    25f6:	36 fe       	sbrs	r3, 6
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <vfprintf+0x198>
    25fa:	69 2d       	mov	r22, r9
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <vfprintf+0x19c>
    2600:	6f ef       	ldi	r22, 0xFF	; 255
    2602:	7f ef       	ldi	r23, 0xFF	; 255
    2604:	c5 01       	movw	r24, r10
    2606:	2d d1       	rcall	.+602    	; 0x2862 <strnlen_P>
    2608:	4c 01       	movw	r8, r24
    260a:	f3 2d       	mov	r31, r3
    260c:	f0 68       	ori	r31, 0x80	; 128
    260e:	3f 2e       	mov	r3, r31
    2610:	82 01       	movw	r16, r4
    2612:	33 fc       	sbrc	r3, 3
    2614:	19 c0       	rjmp	.+50     	; 0x2648 <vfprintf+0x1e0>
    2616:	82 2d       	mov	r24, r2
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	88 16       	cp	r8, r24
    261c:	99 06       	cpc	r9, r25
    261e:	a0 f4       	brcc	.+40     	; 0x2648 <vfprintf+0x1e0>
    2620:	b6 01       	movw	r22, r12
    2622:	80 e2       	ldi	r24, 0x20	; 32
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	33 d1       	rcall	.+614    	; 0x288e <fputc>
    2628:	2a 94       	dec	r2
    262a:	f5 cf       	rjmp	.-22     	; 0x2616 <vfprintf+0x1ae>
    262c:	f5 01       	movw	r30, r10
    262e:	37 fc       	sbrc	r3, 7
    2630:	85 91       	lpm	r24, Z+
    2632:	37 fe       	sbrs	r3, 7
    2634:	81 91       	ld	r24, Z+
    2636:	5f 01       	movw	r10, r30
    2638:	b6 01       	movw	r22, r12
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	28 d1       	rcall	.+592    	; 0x288e <fputc>
    263e:	21 10       	cpse	r2, r1
    2640:	2a 94       	dec	r2
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	82 1a       	sub	r8, r18
    2646:	91 08       	sbc	r9, r1
    2648:	81 14       	cp	r8, r1
    264a:	91 04       	cpc	r9, r1
    264c:	79 f7       	brne	.-34     	; 0x262c <vfprintf+0x1c4>
    264e:	e1 c0       	rjmp	.+450    	; 0x2812 <vfprintf+0x3aa>
    2650:	84 36       	cpi	r24, 0x64	; 100
    2652:	11 f0       	breq	.+4      	; 0x2658 <vfprintf+0x1f0>
    2654:	89 36       	cpi	r24, 0x69	; 105
    2656:	39 f5       	brne	.+78     	; 0x26a6 <vfprintf+0x23e>
    2658:	f8 01       	movw	r30, r16
    265a:	37 fe       	sbrs	r3, 7
    265c:	07 c0       	rjmp	.+14     	; 0x266c <vfprintf+0x204>
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	0c 5f       	subi	r16, 0xFC	; 252
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	08 c0       	rjmp	.+16     	; 0x267c <vfprintf+0x214>
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	07 2e       	mov	r0, r23
    2672:	00 0c       	add	r0, r0
    2674:	88 0b       	sbc	r24, r24
    2676:	99 0b       	sbc	r25, r25
    2678:	0e 5f       	subi	r16, 0xFE	; 254
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	f3 2d       	mov	r31, r3
    267e:	ff 76       	andi	r31, 0x6F	; 111
    2680:	3f 2e       	mov	r3, r31
    2682:	97 ff       	sbrs	r25, 7
    2684:	09 c0       	rjmp	.+18     	; 0x2698 <vfprintf+0x230>
    2686:	90 95       	com	r25
    2688:	80 95       	com	r24
    268a:	70 95       	com	r23
    268c:	61 95       	neg	r22
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	f0 68       	ori	r31, 0x80	; 128
    2696:	3f 2e       	mov	r3, r31
    2698:	2a e0       	ldi	r18, 0x0A	; 10
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	a3 01       	movw	r20, r6
    269e:	33 d1       	rcall	.+614    	; 0x2906 <__ultoa_invert>
    26a0:	88 2e       	mov	r8, r24
    26a2:	86 18       	sub	r8, r6
    26a4:	44 c0       	rjmp	.+136    	; 0x272e <vfprintf+0x2c6>
    26a6:	85 37       	cpi	r24, 0x75	; 117
    26a8:	31 f4       	brne	.+12     	; 0x26b6 <vfprintf+0x24e>
    26aa:	23 2d       	mov	r18, r3
    26ac:	2f 7e       	andi	r18, 0xEF	; 239
    26ae:	b2 2e       	mov	r11, r18
    26b0:	2a e0       	ldi	r18, 0x0A	; 10
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	25 c0       	rjmp	.+74     	; 0x2700 <vfprintf+0x298>
    26b6:	93 2d       	mov	r25, r3
    26b8:	99 7f       	andi	r25, 0xF9	; 249
    26ba:	b9 2e       	mov	r11, r25
    26bc:	8f 36       	cpi	r24, 0x6F	; 111
    26be:	c1 f0       	breq	.+48     	; 0x26f0 <vfprintf+0x288>
    26c0:	18 f4       	brcc	.+6      	; 0x26c8 <vfprintf+0x260>
    26c2:	88 35       	cpi	r24, 0x58	; 88
    26c4:	79 f0       	breq	.+30     	; 0x26e4 <vfprintf+0x27c>
    26c6:	ae c0       	rjmp	.+348    	; 0x2824 <vfprintf+0x3bc>
    26c8:	80 37       	cpi	r24, 0x70	; 112
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <vfprintf+0x26a>
    26cc:	88 37       	cpi	r24, 0x78	; 120
    26ce:	21 f0       	breq	.+8      	; 0x26d8 <vfprintf+0x270>
    26d0:	a9 c0       	rjmp	.+338    	; 0x2824 <vfprintf+0x3bc>
    26d2:	e9 2f       	mov	r30, r25
    26d4:	e0 61       	ori	r30, 0x10	; 16
    26d6:	be 2e       	mov	r11, r30
    26d8:	b4 fe       	sbrs	r11, 4
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <vfprintf+0x28e>
    26dc:	fb 2d       	mov	r31, r11
    26de:	f4 60       	ori	r31, 0x04	; 4
    26e0:	bf 2e       	mov	r11, r31
    26e2:	09 c0       	rjmp	.+18     	; 0x26f6 <vfprintf+0x28e>
    26e4:	34 fe       	sbrs	r3, 4
    26e6:	0a c0       	rjmp	.+20     	; 0x26fc <vfprintf+0x294>
    26e8:	29 2f       	mov	r18, r25
    26ea:	26 60       	ori	r18, 0x06	; 6
    26ec:	b2 2e       	mov	r11, r18
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <vfprintf+0x294>
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <vfprintf+0x298>
    26f6:	20 e1       	ldi	r18, 0x10	; 16
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x298>
    26fc:	20 e1       	ldi	r18, 0x10	; 16
    26fe:	32 e0       	ldi	r19, 0x02	; 2
    2700:	f8 01       	movw	r30, r16
    2702:	b7 fe       	sbrs	r11, 7
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <vfprintf+0x2ac>
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	0c 5f       	subi	r16, 0xFC	; 252
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <vfprintf+0x2b8>
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 5f       	subi	r16, 0xFE	; 254
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	a3 01       	movw	r20, r6
    2722:	f1 d0       	rcall	.+482    	; 0x2906 <__ultoa_invert>
    2724:	88 2e       	mov	r8, r24
    2726:	86 18       	sub	r8, r6
    2728:	fb 2d       	mov	r31, r11
    272a:	ff 77       	andi	r31, 0x7F	; 127
    272c:	3f 2e       	mov	r3, r31
    272e:	36 fe       	sbrs	r3, 6
    2730:	0d c0       	rjmp	.+26     	; 0x274c <vfprintf+0x2e4>
    2732:	23 2d       	mov	r18, r3
    2734:	2e 7f       	andi	r18, 0xFE	; 254
    2736:	a2 2e       	mov	r10, r18
    2738:	89 14       	cp	r8, r9
    273a:	58 f4       	brcc	.+22     	; 0x2752 <vfprintf+0x2ea>
    273c:	34 fe       	sbrs	r3, 4
    273e:	0b c0       	rjmp	.+22     	; 0x2756 <vfprintf+0x2ee>
    2740:	32 fc       	sbrc	r3, 2
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <vfprintf+0x2ee>
    2744:	83 2d       	mov	r24, r3
    2746:	8e 7e       	andi	r24, 0xEE	; 238
    2748:	a8 2e       	mov	r10, r24
    274a:	05 c0       	rjmp	.+10     	; 0x2756 <vfprintf+0x2ee>
    274c:	b8 2c       	mov	r11, r8
    274e:	a3 2c       	mov	r10, r3
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <vfprintf+0x2f0>
    2752:	b8 2c       	mov	r11, r8
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <vfprintf+0x2f0>
    2756:	b9 2c       	mov	r11, r9
    2758:	a4 fe       	sbrs	r10, 4
    275a:	0f c0       	rjmp	.+30     	; 0x277a <vfprintf+0x312>
    275c:	fe 01       	movw	r30, r28
    275e:	e8 0d       	add	r30, r8
    2760:	f1 1d       	adc	r31, r1
    2762:	80 81       	ld	r24, Z
    2764:	80 33       	cpi	r24, 0x30	; 48
    2766:	21 f4       	brne	.+8      	; 0x2770 <vfprintf+0x308>
    2768:	9a 2d       	mov	r25, r10
    276a:	99 7e       	andi	r25, 0xE9	; 233
    276c:	a9 2e       	mov	r10, r25
    276e:	09 c0       	rjmp	.+18     	; 0x2782 <vfprintf+0x31a>
    2770:	a2 fe       	sbrs	r10, 2
    2772:	06 c0       	rjmp	.+12     	; 0x2780 <vfprintf+0x318>
    2774:	b3 94       	inc	r11
    2776:	b3 94       	inc	r11
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <vfprintf+0x31a>
    277a:	8a 2d       	mov	r24, r10
    277c:	86 78       	andi	r24, 0x86	; 134
    277e:	09 f0       	breq	.+2      	; 0x2782 <vfprintf+0x31a>
    2780:	b3 94       	inc	r11
    2782:	a3 fc       	sbrc	r10, 3
    2784:	10 c0       	rjmp	.+32     	; 0x27a6 <vfprintf+0x33e>
    2786:	a0 fe       	sbrs	r10, 0
    2788:	06 c0       	rjmp	.+12     	; 0x2796 <vfprintf+0x32e>
    278a:	b2 14       	cp	r11, r2
    278c:	80 f4       	brcc	.+32     	; 0x27ae <vfprintf+0x346>
    278e:	28 0c       	add	r2, r8
    2790:	92 2c       	mov	r9, r2
    2792:	9b 18       	sub	r9, r11
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <vfprintf+0x348>
    2796:	b2 14       	cp	r11, r2
    2798:	58 f4       	brcc	.+22     	; 0x27b0 <vfprintf+0x348>
    279a:	b6 01       	movw	r22, r12
    279c:	80 e2       	ldi	r24, 0x20	; 32
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	76 d0       	rcall	.+236    	; 0x288e <fputc>
    27a2:	b3 94       	inc	r11
    27a4:	f8 cf       	rjmp	.-16     	; 0x2796 <vfprintf+0x32e>
    27a6:	b2 14       	cp	r11, r2
    27a8:	18 f4       	brcc	.+6      	; 0x27b0 <vfprintf+0x348>
    27aa:	2b 18       	sub	r2, r11
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <vfprintf+0x34a>
    27ae:	98 2c       	mov	r9, r8
    27b0:	21 2c       	mov	r2, r1
    27b2:	a4 fe       	sbrs	r10, 4
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <vfprintf+0x36c>
    27b6:	b6 01       	movw	r22, r12
    27b8:	80 e3       	ldi	r24, 0x30	; 48
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	68 d0       	rcall	.+208    	; 0x288e <fputc>
    27be:	a2 fe       	sbrs	r10, 2
    27c0:	16 c0       	rjmp	.+44     	; 0x27ee <vfprintf+0x386>
    27c2:	a1 fc       	sbrc	r10, 1
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <vfprintf+0x364>
    27c6:	88 e7       	ldi	r24, 0x78	; 120
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <vfprintf+0x368>
    27cc:	88 e5       	ldi	r24, 0x58	; 88
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	b6 01       	movw	r22, r12
    27d2:	0c c0       	rjmp	.+24     	; 0x27ec <vfprintf+0x384>
    27d4:	8a 2d       	mov	r24, r10
    27d6:	86 78       	andi	r24, 0x86	; 134
    27d8:	51 f0       	breq	.+20     	; 0x27ee <vfprintf+0x386>
    27da:	a1 fe       	sbrs	r10, 1
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0x37a>
    27de:	8b e2       	ldi	r24, 0x2B	; 43
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <vfprintf+0x37c>
    27e2:	80 e2       	ldi	r24, 0x20	; 32
    27e4:	a7 fc       	sbrc	r10, 7
    27e6:	8d e2       	ldi	r24, 0x2D	; 45
    27e8:	b6 01       	movw	r22, r12
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	50 d0       	rcall	.+160    	; 0x288e <fputc>
    27ee:	89 14       	cp	r8, r9
    27f0:	30 f4       	brcc	.+12     	; 0x27fe <vfprintf+0x396>
    27f2:	b6 01       	movw	r22, r12
    27f4:	80 e3       	ldi	r24, 0x30	; 48
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	4a d0       	rcall	.+148    	; 0x288e <fputc>
    27fa:	9a 94       	dec	r9
    27fc:	f8 cf       	rjmp	.-16     	; 0x27ee <vfprintf+0x386>
    27fe:	8a 94       	dec	r8
    2800:	f3 01       	movw	r30, r6
    2802:	e8 0d       	add	r30, r8
    2804:	f1 1d       	adc	r31, r1
    2806:	80 81       	ld	r24, Z
    2808:	b6 01       	movw	r22, r12
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	40 d0       	rcall	.+128    	; 0x288e <fputc>
    280e:	81 10       	cpse	r8, r1
    2810:	f6 cf       	rjmp	.-20     	; 0x27fe <vfprintf+0x396>
    2812:	22 20       	and	r2, r2
    2814:	09 f4       	brne	.+2      	; 0x2818 <vfprintf+0x3b0>
    2816:	4e ce       	rjmp	.-868    	; 0x24b4 <vfprintf+0x4c>
    2818:	b6 01       	movw	r22, r12
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	37 d0       	rcall	.+110    	; 0x288e <fputc>
    2820:	2a 94       	dec	r2
    2822:	f7 cf       	rjmp	.-18     	; 0x2812 <vfprintf+0x3aa>
    2824:	f6 01       	movw	r30, r12
    2826:	86 81       	ldd	r24, Z+6	; 0x06
    2828:	97 81       	ldd	r25, Z+7	; 0x07
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <vfprintf+0x3c8>
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	9f ef       	ldi	r25, 0xFF	; 255
    2830:	2b 96       	adiw	r28, 0x0b	; 11
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	bf 90       	pop	r11
    284e:	af 90       	pop	r10
    2850:	9f 90       	pop	r9
    2852:	8f 90       	pop	r8
    2854:	7f 90       	pop	r7
    2856:	6f 90       	pop	r6
    2858:	5f 90       	pop	r5
    285a:	4f 90       	pop	r4
    285c:	3f 90       	pop	r3
    285e:	2f 90       	pop	r2
    2860:	08 95       	ret

00002862 <strnlen_P>:
    2862:	fc 01       	movw	r30, r24
    2864:	05 90       	lpm	r0, Z+
    2866:	61 50       	subi	r22, 0x01	; 1
    2868:	70 40       	sbci	r23, 0x00	; 0
    286a:	01 10       	cpse	r0, r1
    286c:	d8 f7       	brcc	.-10     	; 0x2864 <strnlen_P+0x2>
    286e:	80 95       	com	r24
    2870:	90 95       	com	r25
    2872:	8e 0f       	add	r24, r30
    2874:	9f 1f       	adc	r25, r31
    2876:	08 95       	ret

00002878 <strnlen>:
    2878:	fc 01       	movw	r30, r24
    287a:	61 50       	subi	r22, 0x01	; 1
    287c:	70 40       	sbci	r23, 0x00	; 0
    287e:	01 90       	ld	r0, Z+
    2880:	01 10       	cpse	r0, r1
    2882:	d8 f7       	brcc	.-10     	; 0x287a <strnlen+0x2>
    2884:	80 95       	com	r24
    2886:	90 95       	com	r25
    2888:	8e 0f       	add	r24, r30
    288a:	9f 1f       	adc	r25, r31
    288c:	08 95       	ret

0000288e <fputc>:
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	fb 01       	movw	r30, r22
    2898:	23 81       	ldd	r18, Z+3	; 0x03
    289a:	21 fd       	sbrc	r18, 1
    289c:	03 c0       	rjmp	.+6      	; 0x28a4 <fputc+0x16>
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	9f ef       	ldi	r25, 0xFF	; 255
    28a2:	2c c0       	rjmp	.+88     	; 0x28fc <fputc+0x6e>
    28a4:	22 ff       	sbrs	r18, 2
    28a6:	16 c0       	rjmp	.+44     	; 0x28d4 <fputc+0x46>
    28a8:	46 81       	ldd	r20, Z+6	; 0x06
    28aa:	57 81       	ldd	r21, Z+7	; 0x07
    28ac:	24 81       	ldd	r18, Z+4	; 0x04
    28ae:	35 81       	ldd	r19, Z+5	; 0x05
    28b0:	42 17       	cp	r20, r18
    28b2:	53 07       	cpc	r21, r19
    28b4:	44 f4       	brge	.+16     	; 0x28c6 <fputc+0x38>
    28b6:	a0 81       	ld	r26, Z
    28b8:	b1 81       	ldd	r27, Z+1	; 0x01
    28ba:	9d 01       	movw	r18, r26
    28bc:	2f 5f       	subi	r18, 0xFF	; 255
    28be:	3f 4f       	sbci	r19, 0xFF	; 255
    28c0:	31 83       	std	Z+1, r19	; 0x01
    28c2:	20 83       	st	Z, r18
    28c4:	8c 93       	st	X, r24
    28c6:	26 81       	ldd	r18, Z+6	; 0x06
    28c8:	37 81       	ldd	r19, Z+7	; 0x07
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	37 83       	std	Z+7, r19	; 0x07
    28d0:	26 83       	std	Z+6, r18	; 0x06
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <fputc+0x6e>
    28d4:	8b 01       	movw	r16, r22
    28d6:	ec 01       	movw	r28, r24
    28d8:	fb 01       	movw	r30, r22
    28da:	00 84       	ldd	r0, Z+8	; 0x08
    28dc:	f1 85       	ldd	r31, Z+9	; 0x09
    28de:	e0 2d       	mov	r30, r0
    28e0:	09 95       	icall
    28e2:	89 2b       	or	r24, r25
    28e4:	e1 f6       	brne	.-72     	; 0x289e <fputc+0x10>
    28e6:	d8 01       	movw	r26, r16
    28e8:	16 96       	adiw	r26, 0x06	; 6
    28ea:	8d 91       	ld	r24, X+
    28ec:	9c 91       	ld	r25, X
    28ee:	17 97       	sbiw	r26, 0x07	; 7
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	17 96       	adiw	r26, 0x07	; 7
    28f4:	9c 93       	st	X, r25
    28f6:	8e 93       	st	-X, r24
    28f8:	16 97       	sbiw	r26, 0x06	; 6
    28fa:	ce 01       	movw	r24, r28
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	08 95       	ret

00002906 <__ultoa_invert>:
    2906:	fa 01       	movw	r30, r20
    2908:	aa 27       	eor	r26, r26
    290a:	28 30       	cpi	r18, 0x08	; 8
    290c:	51 f1       	breq	.+84     	; 0x2962 <__ultoa_invert+0x5c>
    290e:	20 31       	cpi	r18, 0x10	; 16
    2910:	81 f1       	breq	.+96     	; 0x2972 <__ultoa_invert+0x6c>
    2912:	e8 94       	clt
    2914:	6f 93       	push	r22
    2916:	6e 7f       	andi	r22, 0xFE	; 254
    2918:	6e 5f       	subi	r22, 0xFE	; 254
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	8f 4f       	sbci	r24, 0xFF	; 255
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	af 4f       	sbci	r26, 0xFF	; 255
    2922:	b1 e0       	ldi	r27, 0x01	; 1
    2924:	3e d0       	rcall	.+124    	; 0x29a2 <__ultoa_invert+0x9c>
    2926:	b4 e0       	ldi	r27, 0x04	; 4
    2928:	3c d0       	rcall	.+120    	; 0x29a2 <__ultoa_invert+0x9c>
    292a:	67 0f       	add	r22, r23
    292c:	78 1f       	adc	r23, r24
    292e:	89 1f       	adc	r24, r25
    2930:	9a 1f       	adc	r25, r26
    2932:	a1 1d       	adc	r26, r1
    2934:	68 0f       	add	r22, r24
    2936:	79 1f       	adc	r23, r25
    2938:	8a 1f       	adc	r24, r26
    293a:	91 1d       	adc	r25, r1
    293c:	a1 1d       	adc	r26, r1
    293e:	6a 0f       	add	r22, r26
    2940:	71 1d       	adc	r23, r1
    2942:	81 1d       	adc	r24, r1
    2944:	91 1d       	adc	r25, r1
    2946:	a1 1d       	adc	r26, r1
    2948:	20 d0       	rcall	.+64     	; 0x298a <__ultoa_invert+0x84>
    294a:	09 f4       	brne	.+2      	; 0x294e <__ultoa_invert+0x48>
    294c:	68 94       	set
    294e:	3f 91       	pop	r19
    2950:	2a e0       	ldi	r18, 0x0A	; 10
    2952:	26 9f       	mul	r18, r22
    2954:	11 24       	eor	r1, r1
    2956:	30 19       	sub	r19, r0
    2958:	30 5d       	subi	r19, 0xD0	; 208
    295a:	31 93       	st	Z+, r19
    295c:	de f6       	brtc	.-74     	; 0x2914 <__ultoa_invert+0xe>
    295e:	cf 01       	movw	r24, r30
    2960:	08 95       	ret
    2962:	46 2f       	mov	r20, r22
    2964:	47 70       	andi	r20, 0x07	; 7
    2966:	40 5d       	subi	r20, 0xD0	; 208
    2968:	41 93       	st	Z+, r20
    296a:	b3 e0       	ldi	r27, 0x03	; 3
    296c:	0f d0       	rcall	.+30     	; 0x298c <__ultoa_invert+0x86>
    296e:	c9 f7       	brne	.-14     	; 0x2962 <__ultoa_invert+0x5c>
    2970:	f6 cf       	rjmp	.-20     	; 0x295e <__ultoa_invert+0x58>
    2972:	46 2f       	mov	r20, r22
    2974:	4f 70       	andi	r20, 0x0F	; 15
    2976:	40 5d       	subi	r20, 0xD0	; 208
    2978:	4a 33       	cpi	r20, 0x3A	; 58
    297a:	18 f0       	brcs	.+6      	; 0x2982 <__ultoa_invert+0x7c>
    297c:	49 5d       	subi	r20, 0xD9	; 217
    297e:	31 fd       	sbrc	r19, 1
    2980:	40 52       	subi	r20, 0x20	; 32
    2982:	41 93       	st	Z+, r20
    2984:	02 d0       	rcall	.+4      	; 0x298a <__ultoa_invert+0x84>
    2986:	a9 f7       	brne	.-22     	; 0x2972 <__ultoa_invert+0x6c>
    2988:	ea cf       	rjmp	.-44     	; 0x295e <__ultoa_invert+0x58>
    298a:	b4 e0       	ldi	r27, 0x04	; 4
    298c:	a6 95       	lsr	r26
    298e:	97 95       	ror	r25
    2990:	87 95       	ror	r24
    2992:	77 95       	ror	r23
    2994:	67 95       	ror	r22
    2996:	ba 95       	dec	r27
    2998:	c9 f7       	brne	.-14     	; 0x298c <__ultoa_invert+0x86>
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	61 05       	cpc	r22, r1
    299e:	71 05       	cpc	r23, r1
    29a0:	08 95       	ret
    29a2:	9b 01       	movw	r18, r22
    29a4:	ac 01       	movw	r20, r24
    29a6:	0a 2e       	mov	r0, r26
    29a8:	06 94       	lsr	r0
    29aa:	57 95       	ror	r21
    29ac:	47 95       	ror	r20
    29ae:	37 95       	ror	r19
    29b0:	27 95       	ror	r18
    29b2:	ba 95       	dec	r27
    29b4:	c9 f7       	brne	.-14     	; 0x29a8 <__ultoa_invert+0xa2>
    29b6:	62 0f       	add	r22, r18
    29b8:	73 1f       	adc	r23, r19
    29ba:	84 1f       	adc	r24, r20
    29bc:	95 1f       	adc	r25, r21
    29be:	a0 1d       	adc	r26, r0
    29c0:	08 95       	ret

000029c2 <_exit>:
    29c2:	f8 94       	cli

000029c4 <__stop_program>:
    29c4:	ff cf       	rjmp	.-2      	; 0x29c4 <__stop_program>
